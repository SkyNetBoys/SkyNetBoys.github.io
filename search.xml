<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Appium环境安装(Windows环境)</title>
    <url>/2019/11/23/Appium%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-Windows%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="Appium环境安装（Windows环境）"><a href="#Appium环境安装（Windows环境）" class="headerlink" title="Appium环境安装（Windows环境）"></a>Appium环境安装（Windows环境）</h2><h4 id="一、安装node-js"><a href="#一、安装node-js" class="headerlink" title="一、安装node.js"></a>一、安装node.js</h4><p>Appium是使用nodejs实现的，所以node是解释器，首先需要确认安装好。<br>1.到官网下载node.js：<a href="https://nodejs.org/en/download/%EF%BC%8C%E7%8E%B0%E5%9C%A8%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8C%B9%E9%85%8D%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://nodejs.org/en/download/，现在和操作系统匹配的版本。</a><br><img src="nodejs.png" alt="nodejs"><br>2.获取到安装文件后，直接双击安装文件，根据程序的提示，完成nodejs的安装。<br>3.安装完成后，运行cmd，输入node –v，如果安装成功，会输出如下版本信息：<br><img src="cmd.png" alt="cmd"><br>4.</p>
<h4 id="二、配置Android-sdk环境"><a href="#二、配置Android-sdk环境" class="headerlink" title="二、配置Android sdk环境"></a>二、配置Android sdk环境</h4><p>1.安装jdk并配置环境变量<br>a)    在Java官方网站上下载相应系统的jdk文件安装，全部选择默认的安装路径即可安装完成<br>b)    配置JAVA_HOME, 新建 JAVA_HOME 环境变量，变量值是自己安装JDK 的路径，我的是：D:\Java\jdk1.8；<br>c)    配置ClASSPATH, 新建 CLASSPATH 环境变量，变量值是：%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar<br>d)    配置PATH, 找到PATH变量，追加如下目录：%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin;<br>e)    验证安装是否成功<br><img src="jdk.png" alt="jdk"><br>2.Android SDK环境搭建<br>a)    安装Eclipse<br><img src="eclipse.png" alt="eclipse"><br>b)    安装ADT插件<br>启动Eclipse，点击菜单Help -&gt; Install New Software<br>在弹出的菜单中，点击Add，输入名称，然后在URL中输入：<a href="http://dl-ssl.google.com/android/eclipse/">http://dl-ssl.google.com/android/eclipse/</a><br>之后点击Next，选择勾选ADT和NDK插件，选择安装即可，安装过程比较慢，需要耐心等待。<br>安装完成后，重启Eclipse后，点击Windows，在Windows下可以查看安装好的ADT插件。<br><img src="adt.png" alt="adt"><br>c)    安装SDK Tools<br>解压下载下来的文件，尽量不要解压到带有中文路径的文件目录下，目录也不要过深，我的目录为：D:\Program Files\adt_bundle。<br>d)    配置Android SDK环境变量<br>i.    新建 ANDROID_HOME 环境变量，变量值是SDK解压的路径，我的是：D:\Program Files\adt_bundle<br>ii.    追加sdk如下目录到PATH变量<br>1.tools目录：%ANDROID_HOME%\tools<br>2.platform-tools目录：%ANDROID_HOME%\platform-tools<br>3.build-tools目录：%ANDROID_HOME%\build-tools\android-4.3<br>iii.配置Eclipse的ADT插件<br>1.双击打开eclipse，点击菜单栏中的选项 Window—&gt;Perferences<br>2.在打开的对话框中，查看第二选项 Android，后面有一个 SDK Loaction，如果在 SDKLocation 后面没有内容，则通过点击后面的按钮【Browser】按钮，找到自己所配置的SDK文件目录下选中， 然后点击【Apply】，如直接有路径可忽略，然后点击【OK】就好了。<br>配置完成后，在命令提示符下输入adb命令，看到有回显信息的时候，说明Android的环境命令已经安装完成。<br>3.虚拟机设置</p>
<ul>
<li>打开eclipse，点击菜单栏中的选项 Window—&gt;Android Virtual Device Manager，可以用来管理android emulator</li>
<li>点击【create…】可以新建虚拟机</li>
<li>选中虚拟机，然后点【Start】就可以启动该虚拟机</li>
<li>android虚拟机启动比较慢，需要耐心等待，启动好后如下图<br><img src="vm.png" alt="vm"></li>
</ul>
<h4 id="三、安装Appium环境"><a href="#三、安装Appium环境" class="headerlink" title="三、安装Appium环境"></a>三、安装Appium环境</h4><ol>
<li><p>   下载安装文件：<a href="https://bitbucket.org/appium/appium.app/downloads/">https://bitbucket.org/appium/appium.app/downloads/</a></p>
</li>
<li><p>   直接双击appium-installer.exe文件安装就好，桌面会生成一个appium的图标</p>
</li>
<li><p>   把node_modules的bin目录放到系统的Path路径里</p>
</li>
<li><p>检查appium所需的环境是否OK:<br>进入cmd命令行，输入appium-doctor ，出现以下提示，All Checks were successful ,说明环境成功。<br><img src="appium.png" alt="appium"></p>
<h4 id="四、Appium入门实例（Java-demo）"><a href="#四、Appium入门实例（Java-demo）" class="headerlink" title="四、Appium入门实例（Java demo）"></a>四、Appium入门实例（Java demo）</h4></li>
<li><p>   启动Android模拟器<br><img src="java.png" alt="java"></p>
</li>
</ol>
<ul>
<li><p>直接双击appium gui图标(如下图)：</p>
</li>
<li><p>点击右上角启动名按钮</p>
<h4 id="五、问题备注："><a href="#五、问题备注：" class="headerlink" title="五、问题备注："></a>五、问题备注：</h4></li>
<li><p>获取包名的方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">adb logcat &gt; d:\log.txt<br></code></pre></td></tr></table></figure>
<p>搜索Displayed，找PACKAGE和Activity。</p>
</li>
<li><p>更改代理，加快SDK下载速度：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">mirrors.zzu.edu.cn 80<br></code></pre></td></tr></table></figure></li>
<li><p>arm平台的虚拟机运行速度较慢，建议使用X86平台。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>Appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Autowired的使用：推荐对构造函数进行注释</title>
    <url>/2020/09/13/Autowired%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%9A%E6%8E%A8%E8%8D%90%E5%AF%B9%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h3 id="Autowired的使用：推荐对构造函数进行注释"><a href="#Autowired的使用：推荐对构造函数进行注释" class="headerlink" title="@Autowired的使用：推荐对构造函数进行注释"></a>@Autowired的使用：推荐对构造函数进行注释</h3><p>在编写代码的时候，使用@Autowired注解是，发现IDE报的一个警告，如下：</p>
<blockquote>
<p>Spring Team recommends “Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies”.</p>
<p>-&gt;　Spring建议”总是在您的bean中使用构造函数建立依赖注入。总是使用断言强制依赖”。</p>
</blockquote>
<p>之前我的习惯写法如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> EnterpriseDbService service;<br></code></pre></td></tr></table></figure>

<p>按照建议应该写成下面的样子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EnterpriseDbService service;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EnterpriseDbController</span><span class="hljs-params">(EnterpriseDbService service)</span> </span>&#123;<br>   <span class="hljs-keyword">this</span>.service = service;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>原因是：使用构造器注入的方法，<strong>可以明确成员变量的加载顺序</strong>。</p>
<p>Java变量的初始化顺序为：静态变量或静态语句块–&gt;实例变量或初始化语句块–&gt;构造方法–&gt;@Autowired</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS6安装中文支持</title>
    <url>/2019/11/10/CentOS6%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[<p>安装中文支持包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install fonts-chinese<br>yum install fonts-ISO8859-2<br></code></pre></td></tr></table></figure>

<p>一.安装中文支持</p>
<p>方法1：在安装光盘找到包进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rpm -ivh fonts-chinese-3.02-9.6.el5.noarch.rpm<br>rpm -ivh fonts-ISO8859-2-75dpi-1.0-17.1.noarch.rpm<br></code></pre></td></tr></table></figure>

<p>方法2：使用yum进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install fonts-chinese<br>yum install fonts-ISO8859-2<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下搭建LAMP</title>
    <url>/2023/03/12/CentOS%E4%B8%8B%E6%90%AD%E5%BB%BALAMP/</url>
    <content><![CDATA[<h3 id="LAMP简介"><a href="#LAMP简介" class="headerlink" title="LAMP简介"></a>LAMP简介</h3><p>Linux+Apache+Mysql +Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。随着开源潮流的蓬勃发展，开放源代码的LAMP已经与J2EE和.Net商业软件形成三足鼎立之势，并且该软件开发的项目在软件方面的投资成本较低，因此受到整个IT界的关注。从网站的流量上来说，70%以上的访问流量是LAMP来提供的，LAMP是最强大的网站解决方案,开发者在Windows操作系统下使用这些Linux环境里的工具称为使用WAMP。<br><img src="logo.png" alt="logo"><br>Linux 是免费开源软件，这意味着源代码可用的操作系统。<br><strong>Apache</strong><br>Apache 是使用中最受欢迎的一个开放源码的WEB服务器软件。<br><strong>MySQL</strong><br>MySQL 是多线程、多用户的SQL数据库管理系统。<br>MySQL 已拥有由Oracle公司自 2010 年 1 月 27 日通过SUN购买。SUN 最初于 2008 年 2 月 26 日收购 MySQL。<br><strong>PHP，Perl 或 Python</strong><br>PHP 是一种编程语言最初设计生产动态网站。PHP 是主要用于服务器端的应用程序软件。Perl 和 Python 类似。</p>
<table>
<thead>
<tr>
<th align="center">WebSite</th>
<th align="center">System</th>
<th align="center">Server</th>
<th align="center">Database</th>
<th align="center">language</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Yahoo</td>
<td align="center">FreeBSD + Linux</td>
<td align="center">Apache</td>
<td align="center">MySQL</td>
<td align="center">PHP</td>
</tr>
<tr>
<td align="center">Facebook</td>
<td align="center">FreeBSD</td>
<td align="center">Apache</td>
<td align="center">MySQL + Memcached</td>
<td align="center">PHP</td>
</tr>
<tr>
<td align="center">Wikimedia</td>
<td align="center">Linux</td>
<td align="center">Apache + Lighttpd</td>
<td align="center">MySQL + Memcached</td>
<td align="center">PHP</td>
</tr>
<tr>
<td align="center">Flickr</td>
<td align="center">Redhat</td>
<td align="center">Apache</td>
<td align="center">MySQL + Memcached</td>
<td align="center">PHP + Perl</td>
</tr>
<tr>
<td align="center">Sina</td>
<td align="center">FreeBSD + Solaris</td>
<td align="center">Apache + Nginx</td>
<td align="center">MySQL + Memcached</td>
<td align="center">PHP</td>
</tr>
<tr>
<td align="center">YouTube</td>
<td align="center">Suse Linux</td>
<td align="center">Apache + Lighttpd</td>
<td align="center">MySQL</td>
<td align="center">Python</td>
</tr>
</tbody></table>
<h3 id="搭建LNMP"><a href="#搭建LNMP" class="headerlink" title="搭建LNMP"></a>搭建LNMP</h3><p>源代码编译安装</p>
<ol>
<li>首先准备一下软件包，如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysql-5.0.22.tar.gz<br>httpd-2.2.17.tar.gz<br>php-5.3.5.tar.gz<br></code></pre></td></tr></table></figure>

<p>以上是LAMP搭建必备的安装包，可以去各个官方网站上下载，这三个安装包没有先后的安装顺序，先将以上三个包上出至Linux下的/usr/local/src目录下，并给予可执行权限。</p>
<ol start="2">
<li>安装mysql，这里要介绍mysql的源代码编译安装方式，进入已经部署好饿的Centos linux学习环境，通过命令ps -ef | grep mysql来查看是否有运行的mysql进程，然后可以通过一些命令来查找mysql是否已经安装，具体如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">groupadd mysql<br><span class="hljs-comment">#创建mysql用户，并将用户指定至mysql组</span><br>useradd mysql -g mysql<br><span class="hljs-comment">#解压到mysql-5.0.22目录下</span><br>tar -zxvf mysql-5.0.22.tar.gz<br><span class="hljs-comment">#这里是配置mysql的安装目录</span><br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/mysql                     <br>make<br><span class="hljs-comment">#安装</span><br>make install<br><span class="hljs-comment">#待安装完成之后，将当前目录下的配置文件拷贝到系统配置文件下，并更名为my.cnf</span><br>cp support-files/my-medium.cnf /etc/my.cnf          <br><span class="hljs-comment">#切换到mysql安装目录下</span><br><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/mysql                                              <br><span class="hljs-comment">#将该目录的用户权限全部更改为mysql用户</span><br>chown -R mysql .                                                <br><span class="hljs-comment">#将该目录的用户组全部更改为mysql用户组</span><br>chgrp -R mysql .                                                <br><span class="hljs-comment">#将mysql目录的数据使用权限指定为mysql</span><br>bin/mysql_install_db --user=mysql                      <br>chown -R mysql var<br><span class="hljs-comment">#指定mysql用户启动mysql </span><br>bin/mysqld_safe --user=mysql &amp;                         <br><span class="hljs-comment">#执行这个命令用于设置或者更改数据库的密码</span><br>bin/mysqladmin -u root password 新密码<br><span class="hljs-comment">#这里将mysql的启动文件拷贝到系统的启动目录下</span><br>cp /usr/<span class="hljs-built_in">local</span>/src/mysql-5.0.22/support-files/mysql.server  /etc/rc.d/init.d/mysql      //<br><span class="hljs-comment">#给系统目录的mysql命令以可执行权限</span><br>chmod +x /etc/rc.d/init.d/mysql                         <br><span class="hljs-comment">#将mysql启动添加到系统自启动列表下</span><br>chkconfig --add mysql         <br><span class="hljs-comment">#当然这里还有另外一些方法来设置mysql自动启动，以上就是mysql源代码编译安装全过程，为了验证mysql安装是否成功，需要执行如下命令：</span><br><span class="hljs-comment">#//启动mysql数据库服务</span><br>/usr/<span class="hljs-built_in">local</span>/mysql/bin/mysqld_safe --user=mysql &amp;<br><span class="hljs-comment">#进入并访问mysql数据，如果进入mysql数据库命令行，说明mysql数据库安装成功。</span><br>/usr/<span class="hljs-built_in">local</span>/mysql/bin/mysql -uroot -proot              <br></code></pre></td></tr></table></figure>

<p>如图所示：<br><img src="1.jpg" alt="1">  </p>
<ol start="3">
<li>安装apache，命令行如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxvf httpd-2.2.4.tar.gz<br><span class="hljs-built_in">cd</span> httpd-2.2.4<br><span class="hljs-comment">#配置与mysql的关联，并启动动态连接库</span><br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/apache --with-mysql=/usr/<span class="hljs-built_in">local</span>/mysql --enable-module=so --enable-shared=max <br>mark<br>mark install<br></code></pre></td></tr></table></figure>

<p>启动apache服务，如下图所示：<br><img src="2.jpg" alt="2"><br>设置apache自动随操作系统启动，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#将apache的启动程序命令放置系统启动文件下，当然mysql也可以这么设置</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/usr/local/apache/bin/apachectl start&quot;</span> &gt;&gt; /etc/rc.local          <br></code></pre></td></tr></table></figure>

<ol start="4">
<li>安装php，命令行如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxvf php-5.2.2.tar.gz<br><span class="hljs-built_in">cd</span> php-5.2.2<br><span class="hljs-comment">#这里是配置php与apache、mysql的关联</span><br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/php/ --with-mysql=/usr/<span class="hljs-built_in">local</span>/mysql --with-apxs2=/usr/<span class="hljs-built_in">local</span>/apache/bin/apxs --enable-sockets  <br>make<br>make install<br>cp php.ini-development /usr/<span class="hljs-built_in">local</span>/php/lib/php.ini                      //这里需要注意的是，在新版的php配置文件将php.ini-dist更改成php.ini-development<br>vi /usr/<span class="hljs-built_in">local</span>/php/lib/php.ini   <br></code></pre></td></tr></table></figure>

<p>上述就是PHP的安装过程。</p>
<ol start="5">
<li>测试<br>安装完成以上个包之后，需要更改apache的配置文件，来达到解析php文件的目的</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vi /usr/<span class="hljs-built_in">local</span>/apache/conf/httpd.conf<br></code></pre></td></tr></table></figure>

<p>通过“/”来查找到AddType application/x-gzip .tgz，这里需要注意的是，不是带有的注意标记的#，在找到AddType application/x-gzip .tgz的后面添加如图所示文件：<br><img src="3.jpg" alt="3"></p>
<p>添加文件为AddType application/x-httpd-php .php .phtml，表示apache服务中可以解析php格式文件<br>接下来要检查apache目录下生成的php动态连接库文件，在目录/usr/local/apache/modules，找到是否存在 libphp5.so文件<br>一系列安装结束之后，通过一个简单的php测试页面来测试LAMP环境搭建成功与否。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vi /usr/<span class="hljs-built_in">local</span>/apache/htdocs/index.php<br></code></pre></td></tr></table></figure>

<p>内容为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>phpinfo();<br>?&gt;<br></code></pre></td></tr></table></figure>

<p>启动httpd<br>在浏览器上输入：<a href="http://ip/index.php%EF%BC%8C%E6%98%BE%E7%A4%BA%E5%A6%82%E4%B8%8B%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%A1%A8%E6%98%8E%E6%88%90%E5%8A%9F%EF%BC%9B">http://ip/index.php，显示如下页面，表明成功；</a><br><img src="4.jpg" alt="4"><br>里面分别显示php、apache和mysql的相关版本信息等内容。<br><strong>yum安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装apache</span><br>yum install –y httpd<br><span class="hljs-comment">#安装MySQL</span><br>yum install –y mysql-server mysql<br><span class="hljs-comment">#安装PHP及相关模块</span><br>yum install –y php php-mysql<br></code></pre></td></tr></table></figure>

<p>练习：部署并发布禅道</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker命令小结</title>
    <url>/2021/07/04/Docker%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h3 id="Docker命令小结"><a href="#Docker命令小结" class="headerlink" title="Docker命令小结"></a>Docker命令小结</h3><ul>
<li><p>Docker images查看所有本的主机上的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker images<br>REPOSITORY                                             TAG       IMAGE ID       CREATED        SIZE<br>mysql                                                  latest    5c62e459e087   11 days ago    556MB<br>hello-world                                            latest    d1165f221234   4 months ago   13.3kB<br>centos                                                 latest    300e315adb2f   6 months ago   209MB<br>registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g   latest    3fa112fd3642   5 years ago    6.85GB<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 解释</span><br>REPOSITORY	镜像的仓库源<br>TAG		镜像的标签<br>IMAGE ID 	镜像的ID<br>CREATED		镜像的创建时间<br>SIZE		镜像的大小<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 可选项</span><br>-a, -all	# 列出所有镜像<br>-q, --quiet	# 只显示镜像的ID<br></code></pre></td></tr></table></figure>
</li>
<li><p>Docker search 搜索镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker search mysql<br>NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql                             MySQL is a widely used, open-source relation…   11085     [OK]<br>mariadb                           MariaDB Server is a high performing open sou…   4200      [OK]<br>mysql/mysql-server                Optimized MySQL Server Docker images. Create…   823                  [OK]<br>mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   88<br>centos/mysql-57-centos7           MySQL 5.7 SQL database server                   88<br>centurylink/mysql                 Image containing mysql. Optimized to be link…   59                   [OK]<br>databack/mysql-backup             Back up mysql databases to... anywhere!         44<br>deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]<br>prom/mysqld-exporter                                                              39                   [OK]<br>tutum/mysql                       Base docker image to run a MySQL database se…   35<br>linuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   30<br>schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   29                   [OK]<br>mysql/mysql-router                MySQL Router provides transparent routing be…   21<br>centos/mysql-56-centos7           MySQL 5.6 SQL database server                   20<br>arey/mysql-client                 Run a MySQL client from a docker container      17                   [OK]<br>fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   14                   [OK]<br>yloeffler/mysql-backup            This image runs mysqldump to backup data usi…   7                    [OK]<br>genschsa/mysql-employees          MySQL Employee Sample Database                  7                    [OK]<br>openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6<br>devilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offici…   3<br>ansibleplaybookbundle/mysql-apb   An APB which deploys RHSCL MySQL                2                    [OK]<br>jelastic/mysql                    An image of the MySQL database server mainta…   1<br>widdpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   1                    [OK]<br>vitess/mysqlctld                  vitess/mysqlctld                                1                    [OK]<br>centos/mysql-80-centos7           MySQL 8.0 SQL database server                   1<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 可选项，通过收藏来过滤</span><br>--fllter=STARS=3000	# 搜索出来的镜像就是STARS大于3000的<br>[root@localhost ~]# docker search mysql --filter=STARS=3000<br>NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql     MySQL is a widely used, open-source relation…   11085     [OK]<br>mariadb   MariaDB Server is a high performing open sou…   4200      [OK]<br></code></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记</title>
    <url>/2020/01/29/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><p><strong>docker</strong>是一个开源的应用容器引擎；<br>docker支持将软件编译成一个镜像；然后再镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像。<br>运行中的这个镜像成为容器，容器启动是非常快速的。</p>
<h4 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h4><p>docker主机(Host)：安装了Docker程序的机器(Docker直接安装再操作系统之上);<br>docker客户端(Client)：连接docker主机进行操作；<br>docker仓库(Registry)：用来保存各种打包好的软件镜像；<br>docker镜像(Images)： 软件打包好的镜像；放在docker仓库中；<br>docker容器(Container)：镜像启动后的实例成为一个容器；容器是独立运行的一个或一组应用；</p>
<p>使用docker的步骤：<br>1）安装docker<br>2）去docker仓库中找到这个软件对应的镜像；<br>3）使用docker运行这个镜像，这个镜像就会生成一个docker容器<br>4）对容器的启动停止就是对软件的启动停止</p>
<h4 id="3、Linux虚拟机安装docker"><a href="#3、Linux虚拟机安装docker" class="headerlink" title="3、Linux虚拟机安装docker"></a>3、Linux虚拟机安装docker</h4><p>步骤：<br>1.检查内核版本，必须是3.10及以上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost init.d]<span class="hljs-comment"># uname -r</span><br>3.10.0-957.el7.x86_64<br></code></pre></td></tr></table></figure>

<p>2.安装docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install docker -y<br></code></pre></td></tr></table></figure>

<p>3.启动docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs bas">[root@localhost init.d]# systemctrl start docker<br>[root@localhost init.d]# docker -v<br>Docker version 1.13.1, build 4ef4b30/1.13.1<br></code></pre></td></tr></table></figure>

<p>4.设置开机自启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure>

<p>5.停止docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl stop docker<br></code></pre></td></tr></table></figure>
<h4 id="4、docker镜像操作"><a href="#4、docker镜像操作" class="headerlink" title="4、docker镜像操作"></a>4、docker镜像操作</h4><p>1、搜索镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost init.d]<span class="hljs-comment"># docker search mysql</span><br>INDEX       NAME                                        DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>docker.io   docker.io/mysql                             MySQL is a widely used, open-source relati...   9073      [OK]<br>docker.io   docker.io/mariadb                           MariaDB is a community-developed fork of M...   3206      [OK]<br>docker.io   docker.io/mysql/mysql-server                Optimized MySQL Server Docker images. Crea...   673                  [OK]<br>docker.io   docker.io/centos/mysql-57-centos7           MySQL 5.7 SQL database server                   67<br>docker.io   docker.io/centurylink/mysql                 Image containing mysql. Optimized to be li...   61                   [OK]<br>docker.io   docker.io/mysql/mysql-cluster               Experimental MySQL Cluster Docker images. ...   60<br>docker.io   docker.io/deitch/mysql-backup               REPLACED! Please use http://hub.docker.com...   41                   [OK]<br>docker.io   docker.io/bitnami/mysql                     Bitnami MySQL Docker Image                      35                   [OK]<br>docker.io   docker.io/tutum/mysql                       Base docker image to run a MySQL database ...   34<br>docker.io   docker.io/schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic back...   28                   [OK]<br>docker.io   docker.io/prom/mysqld-exporter                                                              26                   [OK]<br>docker.io   docker.io/linuxserver/mysql                 A Mysql container, brought to you by Linux...   24<br>docker.io   docker.io/centos/mysql-56-centos7           MySQL 5.6 SQL database server                   18<br>docker.io   docker.io/circleci/mysql                    MySQL is a widely used, open-source relati...   16<br>docker.io   docker.io/mysql/mysql-router                MySQL Router provides transparent routing ...   14<br>docker.io   docker.io/arey/mysql-client                 Run a MySQL client from a docker container      13                   [OK]<br>docker.io   docker.io/databack/mysql-backup             Back up mysql databases to... anywhere!         10<br>docker.io   docker.io/openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 ima...   6<br>docker.io   docker.io/fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron t...   4                    [OK]<br>docker.io   docker.io/genschsa/mysql-employees          MySQL Employee Sample Database                  4                    [OK]<br>docker.io   docker.io/ansibleplaybookbundle/mysql-apb   An APB <span class="hljs-built_in">which</span> deploys RHSCL MySQL                2                    [OK]<br>docker.io   docker.io/devilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offi...   2<br>docker.io   docker.io/jelastic/mysql                    An image of the MySQL database server main...   1<br>docker.io   docker.io/monasca/mysql-init                A minimal decoupled init container <span class="hljs-keyword">for</span> mysql    0<br>docker.io   docker.io/widdpim/mysql-client              Dockerized MySQL Client (5.7) including Cu...   0                    [OK]<br></code></pre></td></tr></table></figure>
<p>2.下载镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#下载最新版本的镜像</span><br>docker pull mysql<br><span class="hljs-comment">#下载指定版本的MySql镜像</span><br>docker pull mysql:5.5<br></code></pre></td></tr></table></figure>
<p>3、查看所有镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure>
<p>4、删除镜像 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker rmi image-id<br></code></pre></td></tr></table></figure>

<h4 id="5、docker容器操作"><a href="#5、docker容器操作" class="headerlink" title="5、docker容器操作"></a>5、docker容器操作</h4><p>软件镜像—运行镜像—产生一个容器（正在运行的软件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1、搜索镜像</span><br>docker search tomcat<br><span class="hljs-comment">#2、拉取镜像</span><br>docker pull tomcat<br><span class="hljs-comment">#3、根据镜像启动容器</span><br>docker run --name mytomcat -d tomcat:latest<br></code></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java - Enum小结</title>
    <url>/2020/03/21/Java-Enum%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<p>工作中很少使用枚举类，每次想用的时候总是偷懒使用直接定义常量的方式了，今天有时间好好探究下Enum.<br>为什么我们需要枚举类<br>以学生管理系统的权限管理为例，该系统管理员一般有3个权限类名：系统管理员，教师，学生，我们可以将其定义为静态常量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> Student = <span class="hljs-number">1</span>;	<span class="hljs-comment">//学生</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> Teacher = <span class="hljs-number">2</span>;	<span class="hljs-comment">//教师</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> Admin = <span class="hljs-number">3</span>;	<span class="hljs-comment">//管理员</span><br></code></pre></td></tr></table></figure>

<p>这种直接常量的方式定义本身没有问题，但是缺少了约束，存在安全隐患。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">judgeUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> user)</span></span>&#123;<br>        ...<br>&#125;<br></code></pre></td></tr></table></figure>

<p>比如这个方法是判断传入的用户类型，但是在调用该方法时，开发者时可以传入任意的值，并无限制。<br>现在我们就要切换到Enum的方式，我们刚好对比下有什么值得我们update的地方。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">User</span> </span>&#123;<br>    ROLE_ADMIN,<br>    ROLE_TEACHER,<br>    ROLE_STUDENT<br>&#125;<br></code></pre></td></tr></table></figure>

<p>接下来我们就用这个User为例先看看枚举类的基本用法有那些？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserSIT</span> </span>&#123;<br>    User user1 = User.ROLE_ADMIN;<br>    User user2 = User.ROLE_TEACHER;<br>    User user3 = User.ROLE_STUDENT;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enum_testcae</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//value()方法：返回所有枚举常量的数组集合</span><br>        <span class="hljs-keyword">for</span> (User user : User.values()) &#123;<br>            System.out.println(user);<br>        &#125;<br>        <span class="hljs-comment">//打印：</span><br>        <span class="hljs-comment">//ROLE_ADMIN</span><br>        <span class="hljs-comment">//ROLE_TEACHER</span><br>        <span class="hljs-comment">//ROLE_STUDENT</span><br><br>        <span class="hljs-comment">//ordinal()方法：返回枚举常量的序数，从0开始</span><br>        System.out.println(user1.ordinal());<span class="hljs-comment">//打印0</span><br>        System.out.println(user2.ordinal());<span class="hljs-comment">//打印1</span><br>        System.out.println(user3.ordinal());<span class="hljs-comment">//打印2</span><br><br>        <span class="hljs-comment">//compareTo()方法：枚举常量间的比较</span><br>        <span class="hljs-comment">//调用compareTo方法返回的结果，正值代表方法中参数在调用该方法的枚举对象位置之前</span><br>		<span class="hljs-comment">//0代表两个成员在相同的位置；</span><br>		<span class="hljs-comment">//负值代表方法中参数在调用该方法的枚举对象位置之后</span><br>        System.out.println(user1.compareTo(user2));<span class="hljs-comment">//打印-1</span><br>        System.out.println(user2.compareTo(user3));<span class="hljs-comment">//打印-1</span><br>        System.out.println(user1.compareTo(user3));<span class="hljs-comment">//打印-2</span><br><br>        <span class="hljs-comment">//name()方法：获得枚举常量的名称</span><br>        System.out.println(user1.name());<span class="hljs-comment">//打印ROLE_ADMIN</span><br>        System.out.println(user2.name());<span class="hljs-comment">//打印ROLE_TEACHER</span><br>        System.out.println(user3.name());<span class="hljs-comment">//打印ROLE_STUDENT</span><br><br>        <span class="hljs-comment">//valueOf()方法：返回指定名称的枚举常量</span><br>        System.out.println(User.valueOf(<span class="hljs-string">&quot;ROLE_ADMIN&quot;</span>));<br>        System.out.println(User.valueOf(<span class="hljs-string">&quot;ROLE_TEACHER&quot;</span>));<br>        System.out.println(User.valueOf(<span class="hljs-string">&quot;ROLE_STUDENT&quot;</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p> 除此之外，枚举类也可以用在switch中:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enum_testcase_002</span><span class="hljs-params">()</span> </span>&#123;<br>    User user = User.ROLE_ADMIN;<br>    <span class="hljs-keyword">switch</span> (user) &#123;<br>        <span class="hljs-keyword">case</span> ROLE_ADMIN:<br>            System.out.println(<span class="hljs-string">&quot;管理员&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> ROLE_TEACHER:<br>            System.out.println(<span class="hljs-string">&quot;教师&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> ROLE_STUDENT:<br>            System.out.println(<span class="hljs-string">&quot;学生&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>当然枚举也存在多值的用法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">UserRole</span> </span>&#123;<br>    ROLE_ROOT_ADMIN(<span class="hljs-string">&quot;系统管理员&quot;</span>, <span class="hljs-number">000000</span>),<br>    ROLE_ORDER_ADMIN(<span class="hljs-string">&quot;订单管理员&quot;</span>, <span class="hljs-number">100000</span>),<br>    ROLE_NORMAL(<span class="hljs-string">&quot;普通用户&quot;</span>, <span class="hljs-number">20000</span>),<br>    ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String roleName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer roleCode;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoleName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roleName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getRoleCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roleCode;<br>    &#125;<br><br>    UserRole(String roleName, Integer roleCode) &#123;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>        <span class="hljs-keyword">this</span>.roleCode = roleCode;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">getRoleNameByRoleName</span><span class="hljs-params">(String roleName)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (UserRole enums : UserRole.values()) &#123;<br>            <span class="hljs-keyword">if</span> (enums.getRoleName().equals(roleName)) &#123;<br>                <span class="hljs-keyword">return</span> enums.getRoleCode();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>枚举也有一些其他的用法：<br>比如<strong>枚举+接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleOperstion</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">op</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RoleEnum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RoleOperstion</span> </span>&#123;<br>    ROLE_ROOT_ADMIN &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">op</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;,<br>    ROLE_ORDER_ADMIN &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">op</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;,<br>    ROLE_NORMAL &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">op</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>我们再看看如何调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">judgeRole</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">judge</span><span class="hljs-params">(String roleName)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> RoleEnum.valueOf(roleName).op();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这样的方式就可以避免if/else的大量使用。<br>还有<strong>枚举和设计模式的结合</strong></p>
<ul>
<li>单例模式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br><br>    <span class="hljs-comment">//构造函数私有化，避免外部创建实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//定义一个内部枚举</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SingletonEnum</span></span>&#123;<br>        SEED;   <span class="hljs-comment">//唯一一个枚举对象</span><br><br>        <span class="hljs-keyword">private</span> Singleton singleton;<br><br>        SingletonEnum()&#123;<br>            singleton = <span class="hljs-keyword">new</span> Singleton(); <span class="hljs-comment">//真正的对象创建隐藏再这里</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> singleton;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//故意外露的对象获取方法，也是外边获取实例的唯一入口</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonEnum.SEED.getInstance(); <span class="hljs-comment">//通过枚举类来完成</span><br>    &#125;<br><br></code></pre></td></tr></table></figure>

<ul>
<li> 策略模式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Calculator</span> </span>&#123;<br>        ADDITION &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">execute</span><span class="hljs-params">(Double x, Double y)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> x + y;<br>            &#125;<br>        &#125;,<br>        SUBTRACTION &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">execute</span><span class="hljs-params">(Double x, Double y)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> x - y;<br>            &#125;<br>        &#125;,<br>        MULTIPLICATION &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">execute</span><span class="hljs-params">(Double x, Double y)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> x * y;<br>            &#125;<br>        &#125;,<br>        DIVSION &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">execute</span><span class="hljs-params">(Double x, Double y)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> x / y;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Double <span class="hljs-title">execute</span><span class="hljs-params">(Double x, Double y)</span></span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(Calculator.ADDITION.execute(<span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span>));<br>        System.out.println(Calculator.SUBTRACTION.execute(<span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span>));<br>        System.out.println(Calculator.MULTIPLICATION.execute(<span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span>));<br>        System.out.println(Calculator.DIVSION.execute(<span class="hljs-number">4.0</span>, <span class="hljs-number">2.0</span>));<br>    &#125;<br>    <span class="hljs-comment">//console print：</span><br>    <span class="hljs-comment">//6.0</span><br>    <span class="hljs-comment">//2.0</span><br>    <span class="hljs-comment">//8.0</span><br>    <span class="hljs-comment">//2.0</span><br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><p>专门用用于枚举的集合类</p>
<p>EnumSet和EnumMap</p>
</li>
</ul>
<ol>
<li>EnumSet</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">UserRole</span> </span>&#123;<br>    ROLE_ROOT_ADMIN,<br>    ROLE_ORDER_ADMIN,<br>    ROLE_NORMAL<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testcase_001</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//定义一个管理员角色的专属集合</span><br>      EnumSet&lt;UserRole&gt; userRolesForAdmin<br>              = EnumSet.of(<br>              UserRole.ROLE_ROOT_ADMIN,<br>              UserRole.ROLE_ORDER_ADMIN<br>      );<br>      <br>      <span class="hljs-comment">//判断某个进来的用户是不是管理员</span><br>      <span class="hljs-function">Boolean <span class="hljs-title">isAdmin</span><span class="hljs-params">(User user)</span></span>&#123;<br>          <span class="hljs-keyword">if</span>(userRolesForAdmin.contains(user.getUserRole))&#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>          &#125;<span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>          &#125;   <br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>

<p>​    2.EnumMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SIT</span> </span>&#123;<br>    <span class="hljs-comment">//比如系统新进入的一些人，我们需要统计下不同的角色到底有多少人</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testcase_002</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;UserRole,Integer&gt; userRoleIntegerMap = <span class="hljs-keyword">new</span> EnumMap&lt;UserRole, Integer&gt;(UserRole.class);<br>        <span class="hljs-keyword">for</span>(User user : userList)&#123;<br>            Integer num = userRoleIntegerMap.get(user.getUserRole());<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span>!=num)&#123;<br>                userRoleIntegerMap.put(user.getUserRole(),num+<span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                userRoleIntegerMap.put(user.getUserRole(),<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Enum</tag>
      </tags>
  </entry>
  <entry>
    <title>Java generics</title>
    <url>/2023/09/26/Java-generics/</url>
    <content><![CDATA[<blockquote>
<p>Java泛型是J2 SE1.5中引入的一个新特性，其本质是参数化类型，也就是说所操作的数据类型被指定为一个参数（type parameter）这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。</p>
</blockquote>
<h3 id="在Class中应用"><a href="#在Class中应用" class="headerlink" title="在Class中应用"></a>在Class中应用</h3><p>传统实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringPrinter</span> </span>&#123;  <br>    String content;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StringPrinter</span><span class="hljs-params">(String content)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.content = content;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;  <br>        System.out.println(content);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerPrinter</span> </span>&#123;  <br>    Integer content;  <br>  <br>    IntegerPrinter(Integer content) &#123;  <br>        <span class="hljs-keyword">this</span>.content = content;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;  <br>        System.out.println(content);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>我们测试下这两个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testStringPrinter</span><span class="hljs-params">()</span></span>&#123;  <br>    StringPrinter printer = <span class="hljs-keyword">new</span> StringPrinter(<span class="hljs-string">&quot;Hello World&quot;</span>);  <br>    printer.print();  <br>&#125;  <br>  <br><span class="hljs-meta">@Test</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIntegerPrinter</span><span class="hljs-params">()</span></span>&#123;  <br>    IntegerPrinter printer = <span class="hljs-keyword">new</span> IntegerPrinter(<span class="hljs-number">123</span>);  <br>    printer.print();  <br>&#125;<br><span class="hljs-comment">// 分别在控制台打印 “Hello World” 和 123</span><br></code></pre></td></tr></table></figure>
<p>上面的例子是我们传统思维的解决方法，下面使用泛型来重构代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Printer</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;  <br>    T content;  <br>  <br>    Printer(T content) &#123;  <br>        <span class="hljs-keyword">this</span>.content = content;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;  <br>        System.out.println(content);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testStringGenericsPrinter</span><span class="hljs-params">()</span></span>&#123;  <br>    Printer&lt;String&gt; printer = <span class="hljs-keyword">new</span> Printer&lt;&gt;(<span class="hljs-string">&quot;Hello World&quot;</span>);  <br>    printer.print();  <br>&#125;  <br><span class="hljs-meta">@Test</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIntegerGenericsPrinter</span><span class="hljs-params">()</span></span>&#123;  <br>    Printer&lt;Integer&gt; printer = <span class="hljs-keyword">new</span> Printer&lt;&gt;(<span class="hljs-number">123</span>);  <br>    printer.print();  <br>&#125;<br><span class="hljs-comment">//使用测试用例，同样会在控制台打印&quot;Hello World&quot; 和 123</span><br></code></pre></td></tr></table></figure>
<p>T占位符号可以是任何字符，也可以传入多个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Printer</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">K</span>&gt; </span>&#123;  <br>    T content;  <br>    K content2;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Printer</span><span class="hljs-params">(T content, K content2)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.content = content;  <br>        <span class="hljs-keyword">this</span>.content2 = content2;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;  <br>        System.out.println(content);  <br>        System.out.println(content2);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testStringGenericsPrinter</span><span class="hljs-params">()</span> </span>&#123;  <br>    Printer&lt;String, Integer&gt; printer = <span class="hljs-keyword">new</span> Printer&lt;&gt;(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-number">123</span>);  <br>    printer.print();  <br>&#125;  <br><span class="hljs-comment">// 控制台输出 =&gt; &quot;Hello World&quot; 123  </span><br><span class="hljs-meta">@Test</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIntegerGenericsPrinter</span><span class="hljs-params">()</span> </span>&#123;  <br>    Printer&lt;Integer, Integer&gt; printer = <span class="hljs-keyword">new</span> Printer&lt;&gt;(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>);  <br>    printer.print();  <br>&#125;<br><span class="hljs-comment">// 控制台输出 =&gt; 123 456</span><br></code></pre></td></tr></table></figure>
<p>我们也可以对泛型进行一些约束(bounded generics)，比如规定传入的泛型类型必须是某一个类型的子类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Printer</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Vehicle</span>&gt; </span>&#123;  <br>    T content;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Printer</span><span class="hljs-params">(T content)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.content = content;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;  <br>        System.out.println(content);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCarGenericsPrinter</span><span class="hljs-params">()</span> </span>&#123;  <br>    Printer&lt;Car&gt; printer = <span class="hljs-keyword">new</span> Printer&lt;&gt;(<span class="hljs-keyword">new</span> Car(<span class="hljs-number">290000</span>, <span class="hljs-string">&quot;Model X&quot;</span>));  <br>    printer.print();  <br>&#125;  <br>  <br><span class="hljs-meta">@Test</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBusGenericsPrinter</span><span class="hljs-params">()</span> </span>&#123;  <br>    Printer&lt;Bus&gt; printer = <span class="hljs-keyword">new</span> Printer&lt;&gt;(<span class="hljs-keyword">new</span> Bus(<span class="hljs-number">35</span>));  <br>    printer.print();  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>同时我们可以在约束继承类的同时，可以同样加入到接口实现的约束，但是要注意先后顺序，继承类在前，接口在后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Printer</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Vehicle</span> &amp; <span class="hljs-title">Thing</span>&gt; </span>&#123;  <br>    T content;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Printer</span><span class="hljs-params">(T content)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.content = content;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;  <br>        System.out.println(content);  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">// 如果传入的类未实现该接口，在会直接报错(e.g. Bus不在类型变量T的范围内)</span><br></code></pre></td></tr></table></figure>

<h3 id="Method-中的应用"><a href="#Method-中的应用" class="headerlink" title="Method 中的应用"></a>Method 中的应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(T content)</span> </span>&#123;  <br>    System.out.println(content);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br>    print(<span class="hljs-string">&quot;Hello World&quot;</span>);  <br>    print(<span class="hljs-number">1234567</span>);  <br>    print(<span class="hljs-number">12L</span>);  <br>    print(<span class="hljs-keyword">new</span> Car(<span class="hljs-number">150000</span>,<span class="hljs-string">&quot;X5&quot;</span>));  <br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在method中我们同样可以使用bounded generics</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T extends Vehicle &amp; Thing&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(T content )</span> </span>&#123;  <br>    System.out.println(content);  <br>&#125;<br><br><span class="hljs-comment">// 传入多个泛型参数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T,K&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(T content, K content2)</span> </span>&#123;  <br>    System.out.println(content);  <br>    System.out.println(content2);  <br>&#125;<br></code></pre></td></tr></table></figure>

<p>在List中我们可以使用通配符(wildcard)来处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(List&lt;?&gt; list)</span> </span>&#123;  <br>    System.out.println(list);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br>    ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();  <br>    list.add(<span class="hljs-number">123</span>);  <br>    list.add(<span class="hljs-number">456</span>);  <br>    print(list);  <br>    ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();  <br>    list2.add(<span class="hljs-string">&quot;Hello&quot;</span>);  <br>    list2.add(<span class="hljs-string">&quot;World&quot;</span>);  <br>    print(list2);  <br>&#125;<br></code></pre></td></tr></table></figure>

<p>通配符的使用场景下我们同样可以引入约束</p>
<ul>
<li>upper bounded wildcard</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(List&lt;? extends Vehicle&gt; list)</span> </span>&#123;  <br>    System.out.println(list);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br>    ArrayList&lt;Car&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();  <br>    list.add(<span class="hljs-keyword">new</span> Car(<span class="hljs-number">300000</span>,<span class="hljs-string">&quot;320&quot;</span>));  <br>    list.add(<span class="hljs-keyword">new</span> Car(<span class="hljs-number">700000</span>,<span class="hljs-string">&quot;750&quot;</span>));  <br>    print(list);  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>lower bounded wildcard</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(List&lt;? <span class="hljs-keyword">super</span> Vehicle&gt; list)</span> </span>&#123;  <br>    System.out.println(list);  <br>&#125;<br><span class="hljs-comment">// 传入的类型必须是Car本身或者Car的父类，如果传入Bus就会直接报错</span><br></code></pre></td></tr></table></figure>


<figure class="highlight puppet"><table><tr><td class="code"><pre><code class="hljs puppet">备注：博文涉及到的英文单次小结：<br>Generics<br><span class="hljs-keyword">Wildcard</span><br>&#123;&#125; <span class="hljs-keyword">Curly</span> <span class="hljs-keyword">Braces</span><br>&lt;&gt; Angle Brackets<br>? Question Mark<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java+Selenium+Cucumber+Maven/Gradle环境搭建</title>
    <url>/2020/07/02/Java-Selenium-Cucumber-Maven-Gradle%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul>
<li>JDK1.8</li>
<li>Maven/Gradle</li>
<li>Eclipse/IDEA</li>
<li>Cucumber</li>
</ul>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ul>
<li><p>创建Maven项目（IDEA为例）</p>
<ul>
<li><p>update pom文件，引入cucumber和selenium的依賴</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.cucumber<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cucumber-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.cucumber<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cucumber-junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>selenium-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>新增feature文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">Feature:</span> Hello World<br><br>  Scenario <span class="hljs-attr">Outline:</span> Baidu Page<br>    Given user fill <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;&lt;keyword&gt;&quot;</span><br>    And click the search button<br>    Then user can get the result<br><br>    <span class="hljs-symbol">Examples:</span><br>      | keyword |<br>      | java    |<br><br></code></pre></td></tr></table></figure>
</li>
<li><p>生成step:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> BaiduPage page = <span class="hljs-keyword">new</span> BaiduPage();<br><br><span class="hljs-meta">@Given(&quot;^user fill in the \&quot;([^\&quot;]*)\&quot;$&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">user_fill_in_the</span><span class="hljs-params">(String keyword)</span> </span>&#123;<br>        page.goToBaidu(keyword);<br>&#125;<br><br><span class="hljs-meta">@And(&quot;^click the search button$&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">click_the_search_button</span><span class="hljs-params">()</span> </span>&#123;<br>        page.clickSearchBtn();<br>&#125;<br><br><span class="hljs-meta">@Then(&quot;^user can get the result$&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">user_can_get_the_result</span><span class="hljs-params">()</span> </span>&#123;<br>        page.verify();<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>新增runner</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(Cucumber.class)</span><br><span class="hljs-meta">@CucumberOptions(</span><br><span class="hljs-meta">        plugin = &#123;&quot;json:target/cucumber/cucumber.json&quot;, &quot;html:target/cucumber&quot;, &quot;pretty&quot;&#125;,</span><br><span class="hljs-meta">        features = &#123;&quot;src/main/resources/feature/abc.feature&quot;&#125;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunner</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>运行Runner</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">Given user fill in the &quot;java&quot; # BaiduStep.user_fill_in_the(String)<br>And click the search button   # BaiduStep.click_the_search_button()<br>Then user can get the result  # BaiduStep.user_can_get_the_result()<br><br>1 Scenarios (1 passed)<br>3 Steps (3 passed)<br>0m8.945s<br></code></pre></td></tr></table></figure>
</li>
<li><p>查看Report</p>
<p><img src="hellocucumber.png" alt="1593647038145"></p>
</li>
<li><p>拓展，改用Gradle</p>
<p>…</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Java命名规则总结</title>
    <url>/2020/03/24/Java%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>Class名应是首字母大写的名词。命名时应该使其简洁而又具有描述性。异常类的命名，应以Exception结尾。Interface的命名规则与Class相同。</p>
</blockquote>
<ol>
<li><p><strong>JAVA源文件的命名</strong></p>
<p>JAVA源文件名必须和源文件中所定义的类的类名相同。</p>
</li>
<li><p><strong>Package的命名</strong></p>
<p>Package名的第一部分应是小写ASCII字符，并且是顶级域名之一，通常是com、edu、gov、mil、net、org或由ISO标准3166、1981定义的国家唯一标志码。Package名的后续部分由各组织内部命名规则决定，内部命名规则指定了各组件的目录名，所属部门名、项目名等。   </p>
</li>
<li><p><strong>Class/Interface的命名</strong></p>
<p>Class名应是首字母大写的名词。命名时应该使其简洁而又具有描述性。异常类的命名，应以Exception结尾。Interface的命名规则与Class相同。</p>
</li>
<li><p><strong>常量的命名</strong></p>
<p>常量名的字母应全部大写，不同的单词之间通过下划线进行连接，并且名字组合应该赋予含义。</p>
</li>
<li><p><strong>变量的命名</strong></p>
<ul>
<li><p>普通变量　　</p>
<p> ​    普通变量名的首字母小写，其它每个单词的首字母大写。命名时应该使其简短而又有特定含义，简洁明了的向使用者展示其使用意图。   </p>
</li>
<li><p>约定变量　　</p>
<p> ​    所谓约定变量，是指那些使用后即可抛弃（throwaway）的临时变量。通常i、j、k、m和n代表整型变量；c、d和e代表字符型变量。</p>
</li>
</ul>
</li>
<li><p><strong>方法的命名</strong></p>
<p>方法名的第一个单词应是动词，并且首字母小写，其它每个单词首字母大写。  </p>
</li>
<li><p><strong>方法参数的命名</strong></p>
<p>应该选择有意义的名称作为方法的参数名。如果可能的话，选择和需要赋值的字段一样的名字。 </p>
</li>
</ol>
<p><strong>补充资料:</strong></p>
<ol>
<li><p>类名首字母应该大写。属性（成员变量）、方法、对象变量以及所有标识符（如形式参数、实际参数、局部变量）的首字母应小写，其中包含的所有单词都应紧靠在一起，而且大写中间单词的首字母。例如：<br>类名：ThisIsAClassName 属性或方法名：thisIsMethodOrFieldName对象变量：thisIsAClassVariable</p>
</li>
<li><p>Java 包（Package）属于一种特殊情况，它们全都是小写字母，即便中间的单词亦是如此。对于全局包，将你的Internet 域名反转并接上包名。例如：<br>cn.edu.usst.dingyuewei.package。<br>另外，package 行要在import 行之前，import 中标准的包名要在本地的包名之前，而且按照字母顺序排列。如果import 行中包含了同一个包中的不同子目录，则应该用 * 来处理。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hotlava.net.stats;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Observable;<br><span class="hljs-keyword">import</span> hotlava.util.Application;<br></code></pre></td></tr></table></figure>
<p>这里 java.io.* 是用来代替InputStream and OutputStream 的。</p>
</li>
<li><p>接口（Interface）：采用完整的英文描述符说明接口封装，所有单词的第一个字母大写。习惯上，名字后面加上后缀 able， ible 或者 er。例如：Contactable，Prompter。</p>
</li>
<li><p>组件（Component）使用完整的英文描述来说明组件的用途，末端应接上组件类型。例如：okButton，customerList，fileMenu。</p>
</li>
<li><p>类中常用方法的命名：</p>
</li>
</ol>
<ul>
<li><p>类的获取方法（一般具有返回值）一般要求被方法名使用被访问字段名，前面加上前缀get，例如getFirstName(), getLastName()。</p>
</li>
<li><p>类的布尔型的判断方法一般要求方法名使用单词 is 做前缀，如isPersistent(),isString()。或者使用具有逻辑意义的单词，例如equal 或equals</p>
</li>
<li><p>类的设置方法（一般返回类型为void）：被访问字段名的前面加上前缀 set，例如setFirstName(),setLastName()，setWarpSpeed()</p>
</li>
<li><p>类的普通方法一般采用完整的英文描述说明成员方法功能，第一个单词尽可能采用一个生动的动词，第一个字母小写，例如 openFile(), addAccount()。</p>
</li>
<li><p>构造方法应该用递增的方式写（比如：参数多的写在后面）。例如：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CounterSet</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CounterSet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span></span>&#123;<br>    <span class="hljs-keyword">this</span>.size = size;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>toString 方法：一般情况下，每一个类都应该定义toString 方法，其格式为：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;…&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>一般应考虑置入一个main()方法，其中包含用于测试那个类的代码，如果包含了main() 方法, 那么它应该写在类的底部。</p>
</li>
</ul>
<ol start="6">
<li><p>静态常量字段（static final）一般全部采用大写字母，单词之间用下划线分隔（也有特例，如Java 类库中关于颜色的常数没有严格地全部使用大写字母）。例如MIN_BALANCE,DEFAULT_DATE。</p>
</li>
<li><p>循环计数变量通常采用字母 i，j，k 或者 counter。而数组应该总是用下面的方式来命名：objectType[]或 byte[] buffer。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的Optional</title>
    <url>/2023/11/26/Java%E4%B8%AD%E7%9A%84Optional/</url>
    <content><![CDATA[<blockquote>
<p>从 Java 8 引入的一个很有趣的特性是 Optional 类。Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException） —— 每个 Java 程序员都非常了解的异常。<br>本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空。<br>Optional 是 Java 实现函数式编程的强劲一步，并且帮助在范式中实现。但是 Optional 的意义显然不止于此。</p>
</blockquote>
<p><img src="Optional.png" alt="Optional"></p>
<h4 id="传统的判空处理"><a href="#传统的判空处理" class="headerlink" title="传统的判空处理"></a>传统的判空处理</h4><p>我们先看这样一个例子，例如我们使用名字去查找个人信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getFullName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fullName;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String fullName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, String fullName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.fullName = fullName;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRepository</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findUserByName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">&quot;James&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;James&quot;</span>, <span class="hljs-string">&quot;James Harden&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>我们模拟一个数据库中存在的用户名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	UserRepository userRepository = <span class="hljs-keyword">new</span> UserRepository();<br>	User user = userRepository.findUserByName(<span class="hljs-string">&quot;James&quot;</span>);<br>	System.out.println(user.getFullName());<br><br>&#125;<br><span class="hljs-comment">// 打印结果 =&gt; James Harden</span><br></code></pre></td></tr></table></figure>

<p>我们模拟一个数据库中没有的用户名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	UserRepository userRepository = <span class="hljs-keyword">new</span> UserRepository();<br>	User user = userRepository.findUserByName(<span class="hljs-string">&quot;James&quot;</span>);<br>	System.out.println(user.getFullName());<br><br>&#125;<br><span class="hljs-comment">// 打印结果 =&gt; 报错NullPointerException，在Java中引用一个空引用的属性或者调用一个空引用的方法的时候，就会直接报NullPointerException</span><br><span class="hljs-comment">//为了避免报错，我们经常会在方法加上判空</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	UserRepository userRepository = <span class="hljs-keyword">new</span> UserRepository();<br>	User user = userRepository.findUserByName(<span class="hljs-string">&quot;Rose&quot;</span>);<br>	<span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123;<br>		System.out.println(user.getFullName());<br>	&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 在查询为null的时候，我们就会自动创建一个默认的用户</span><br>		User defaultUser = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jim&quot;</span>, <span class="hljs-string">&quot;Jim Green&quot;</span>);<br>		System.out.println(defaultUser.getFullName());<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在实际的代码逻辑中，会有大量的判空处理，我们采用上面的demo的话，会让我们的代码显得非常臃肿，而Optional的引入正好可以完美解决这个问题。</p>
<h4 id="Optional的基本用法"><a href="#Optional的基本用法" class="headerlink" title="Optional的基本用法"></a>Optional的基本用法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	Optional&lt;Object&gt; optionalBox = Optional.empty();<br>    <span class="hljs-comment">// 打印false</span><br>	System.out.println(optionalBox.isPresent());<br>	<span class="hljs-comment">// 打印true</span><br>	System.out.println(optionalBox.isEmpty());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	String value = <span class="hljs-string">&quot;Edison&quot;</span>;<br>	Optional&lt;String&gt; optionalBox = Optional.of(value);<br>	<span class="hljs-comment">// 打印true</span><br>    System.out.println(optionalBox.isPresent());<br>    <span class="hljs-comment">// 打印false</span><br>	System.out.println(optionalBox.isEmpty());<br>&#125;<br></code></pre></td></tr></table></figure>

<p>用of创建的对象必须包含值，你要确保传递给of方法的值部位null，否则还是会报NullPointerException。</p>
<p>但是在实际处理业务中，我们不确定传入的对象是否为null，这时候我们就建议使用ofNullable.</p>
<p>如果我们要从Optional这个盒子中取出值，我们可以使用get.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String value = <span class="hljs-string">&quot;Edison&quot;</span>;<br>Optional&lt;String&gt; optionalBox = Optional.ofNullable(value);<br>String value2 = optionalBox.get();<br></code></pre></td></tr></table></figure>

<p>但是我们并不推荐使用get，这并不是Optional设计的初衷.</p>
<p>接下来我们使用Optional来改造下开始的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRepository</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Optional&lt;User&gt; <span class="hljs-title">findUserByName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">&quot;Edison&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> Optional.of(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;James&quot;</span>,<span class="hljs-string">&quot;Harden&quot;</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Optional.empty();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	UserRepository userRepository = <span class="hljs-keyword">new</span> UserRepository();<br>	Optional&lt;User&gt; optionalUser = userRepository.findUserByName(<span class="hljs-string">&quot;Edison&quot;</span>);<br>	User user = optionalUser.get();<br>	System.out.println(user.getFullName());<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	UserRepository userRepository = <span class="hljs-keyword">new</span> UserRepository();<br>	Optional&lt;User&gt; optionalUser = userRepository.findUserByName(<span class="hljs-string">&quot;Edison&quot;</span>);<br>	<span class="hljs-keyword">if</span> (optionalUser.isPresent()) &#123;<br>		System.out.println(optionalUser.get().getFullName());<br>	&#125; <span class="hljs-keyword">else</span> &#123;<br>		User defaultUser = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Neo&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>);<br>		System.out.println(defaultUser.getFullName());<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>截至到目前我们看到这和开始的例子本质上区别不大，代码仍不够简洁，这也不是Optional设计的初衷，接下来我们使用函数式变成改造下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正确的取值方式</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	UserRepository userRepository = <span class="hljs-keyword">new</span> UserRepository();<br>	Optional&lt;User&gt; optionalUser = userRepository.findUserByName(<span class="hljs-string">&quot;Edison1&quot;</span>);<br>	User user = optionalUser.orElse(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Neo&quot;</span>,<span class="hljs-string">&quot;Green&quot;</span>));<br>	System.out.println(user.getFullName());<br>	User user2 = optionalUser.orElseGet(()-&gt;<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;World&quot;</span>));<br>	System.out.println(user2.getFullName());<br>&#125;<br></code></pre></td></tr></table></figure>

<p>orElse：不管传入的是空还是非空，都会执行传入的这个参数（都会去直接new User()）</p>
<p>orElseGet：只有在为空的情况下，才会去执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	UserRepository userRepository = <span class="hljs-keyword">new</span> UserRepository();<br>	Optional&lt;User&gt; optionalUser = userRepository.findUserByName(<span class="hljs-string">&quot;Edison1&quot;</span>);<br>	optionalUser.orElseThrow(() -&gt; <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;User not found!!!&quot;</span>));<br>&#125;<br><span class="hljs-comment">//输出 =&gt; Exception in thread &quot;main&quot; java.lang.RuntimeException: User not found!!!</span><br></code></pre></td></tr></table></figure>

<p>条件判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">UserRepository userRepository = <span class="hljs-keyword">new</span> UserRepository();<br>Optional&lt;User&gt; optionalUser = userRepository.findUserByName(<span class="hljs-string">&quot;Edison&quot;</span>);<br>optionalUser.ifPresent(user -&gt; System.out.println(user.getFullName()));<br><span class="hljs-comment">// 如果user存在对象，则执行语句，反之则什么也不做</span><br>optionalUser.ifPresentOrElse(<br>	user -&gt; System.out.println(user.getFullName()),<br>	() -&gt; System.out.println(<span class="hljs-string">&quot;User not Found!!!&quot;</span>)<br>);<br><span class="hljs-comment">//user存在执行System.out.println(user.getFullName())</span><br><span class="hljs-comment">//不存在则执行System.out.println(&quot;User not Found!!!&quot;)</span><br></code></pre></td></tr></table></figure>

<p>过滤方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Optional&lt;User&gt; optionalUser2 = optionalUser.filter(user -&gt; user.getFullName().equals(<span class="hljs-string">&quot;Edison&quot;</span>));<br>System.out.println(optionalUser2.isPresent());<br></code></pre></td></tr></table></figure>

<p>值的转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Optional&lt;String&gt; optionalFullName = optionalUser.map(User::getFullName);<br>System.out.println(optionalFullName.get());<br></code></pre></td></tr></table></figure>

<p>flatMap使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 我们改造下User</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Optional&lt;String&gt; <span class="hljs-title">getFullName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Optional.ofNullable(fullName);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String fullName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, String fullName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.fullName = fullName;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_case_001</span><span class="hljs-params">()</span></span>&#123;<br>    Optional&lt;Optional&lt;String&gt;&gt; s = optionalUser.map(User::getFullName);<br>	Optional&lt;String&gt; optional = optionalUser.flatMap(User::getFullName);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>与Stream结合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	UserRepository userRepository = <span class="hljs-keyword">new</span> UserRepository();<br>	Optional&lt;User&gt; optionalUser = userRepository.findUserByName(<span class="hljs-string">&quot;Edison&quot;</span>);<br>	Stream&lt;String&gt; a = optionalUser<br>                .map(User::getFullName)<br>                .stream();<br>	a.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="不推荐的使用场景"><a href="#不推荐的使用场景" class="headerlink" title="不推荐的使用场景"></a>不推荐的使用场景</h4><ul>
<li>不应该用在class的字段，会增加额外的内存消耗，也是对象的序列化变得复杂</li>
<li>不应该用在方法的参数，会使得方法的使用和理解变得复杂</li>
<li>不应该用在构造器参数</li>
<li>不应该用在集合的参数类型</li>
<li>不建议使用get方法，可能会导致NoSuchElementException出现，推荐用ifPresent,orElse或者orElseThrow等方法</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda Expression in Java</title>
    <url>/2023/10/21/Lambda-Expression-in-Java/</url>
    <content><![CDATA[<blockquote>
<p>Lambda表达式是Java SE 8中一个重要的新特性。lambda表达式允许你通过表达式来代替功能接口。 lambda表达式就和方法一样,它提供了一个正常的参数列表和一个使用这些参数的主体(body,可以是一个表达式或一个代码块)。 Lambda 表达式（Lambda expression）可以看作是一个匿名函数，基于数学中的λ演算得名，也可称为闭包（Closure）</p>
</blockquote>
<p><img src="lambda.png" alt="lambda"></p>
<h3 id="传统的接口实现方法"><a href="#传统的接口实现方法" class="headerlink" title="传统的接口实现方法"></a>传统的接口实现方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Vehicle</span> </span>&#123;  <br>	<span class="hljs-comment">//Abstract method</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>; <br>&#125;  <br></code></pre></td></tr></table></figure>

<p>具体实现方法，将接口的声明与具体实现分开 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Vehicle</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;     <br>	    System.out.println(<span class="hljs-string">&quot;starting car engine&quot;</span>);    <br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bus</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Vehicle</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;        <br>	    System.out.println(<span class="hljs-string">&quot;starting bus engine&quot;</span>);    <br>	&#125;<br>&#125;  <br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Truck</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Vehicle</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;        <br>	    System.out.println(<span class="hljs-string">&quot;starting truck engine&quot;</span>);    <br>	&#125;<br>&#125;  <br></code></pre></td></tr></table></figure>

<p>业务中就只需要关心方法，从而实现代码的解耦和模块化 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">startEngine</span><span class="hljs-params">(Vehicle vehicle)</span> </span>&#123;  <br>    vehicle.start()    <br>&#125;<br></code></pre></td></tr></table></figure>

<p>我们可以从另外一个例子中来回顾下这个问题，我们一个信息发送接口，具体的实现类有通过Email和SMS等等。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Message</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span></span>;<br>&#125;  <br></code></pre></td></tr></table></figure>

<p>Email实现类 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Email</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Message</span> </span>&#123;  <br>    <br>    String email;  <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Email</span><span class="hljs-params">()</span> </span>&#123;&#125;  <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;<br>	    System.out.println(<span class="hljs-string">&quot;This is a email.&quot;</span>);   <br>	&#125;<br>&#125;  <br></code></pre></td></tr></table></figure>

<p>SMS实现类 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sms</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Message</span> </span>&#123;  <br>    <br>    String phoneNumber;  <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Sms</span><span class="hljs-params">()</span> </span>&#123;&#125;  <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;        <br>	    System.out.println(<span class="hljs-string">&quot;This is a sms.&quot;</span>);    <br>	&#125;<br>&#125;  <br></code></pre></td></tr></table></figure>

<p>测试代码 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SIT</span> </span>&#123;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(Message message)</span> </span>&#123;        <br>	    message.send();    <br>	&#125;  <br>    <br>    <span class="hljs-meta">@Test</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_message_email</span><span class="hljs-params">()</span> </span>&#123;        <br>	    Message message = <span class="hljs-keyword">new</span> Email();        <br>	    sendMessage(message);    <br>	&#125;  <br>    <br>    <span class="hljs-meta">@Test</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_message_sms</span><span class="hljs-params">()</span> </span>&#123;        <br>	    Message message = <span class="hljs-keyword">new</span> Sms();        <br>	    sendMessage(message);    <br>	&#125;<br>&#125;  <br></code></pre></td></tr></table></figure>

<p>这种传统方法的弊端显而易见，创建了多个实现类，Lambda表达式应运而生  </p>
<h3 id="Lambda实现方式"><a href="#Lambda实现方式" class="headerlink" title="Lambda实现方式"></a>Lambda实现方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSIT</span> </span>&#123;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(Message message)</span> </span>&#123;        <br>	    message.send();    <br>    &#125;  <br>    <br>	<span class="hljs-meta">@Test</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_message_email</span><span class="hljs-params">()</span> </span>&#123;        <br>		    <span class="hljs-comment">/*</span><br><span class="hljs-comment">			如果只包含一条实现语句，也可以取消大括号，详见test_message_sms的写法，如果</span><br><span class="hljs-comment">			实现包含多条语句，则要求使用大括号        </span><br><span class="hljs-comment">			*/</span><br>		    sendMessage(() -&gt; &#123;            <br>	        System.out.println(<span class="hljs-string">&quot;This is email.&quot;</span>);        <br>        &#125;);    <br>    &#125;  <br>    <br>    <span class="hljs-meta">@Test</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_message_sms</span><span class="hljs-params">()</span> </span>&#123;        <br>	    sendMessage(() -&gt; System.out.println(<span class="hljs-string">&quot;This is sms.&quot;</span>));    <br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure>

<h4 id="实现的方法包含参数的情况"><a href="#实现的方法包含参数的情况" class="headerlink" title="实现的方法包含参数的情况"></a>实现的方法包含参数的情况</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Message</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(String name)</span></span>;<br>&#125;  <br></code></pre></td></tr></table></figure>

<p>Lambda实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSIT</span> </span>&#123;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(Message message)</span> </span>&#123;  <br>        message.send(<span class="hljs-string">&quot;Edison&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_message_email</span><span class="hljs-params">()</span> </span>&#123;  <br>        sendMessage((name) -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;This is email to &quot;</span> + name);  <br>        &#125;);  <br>        <span class="hljs-comment">// 上面的表达语句可以进一步简化成这样1行</span><br>        sendMessage(name -&gt; System.out.println(<span class="hljs-string">&quot;This is email to &quot;</span> + name));  <br>        <span class="hljs-comment">// 运行完成，console print =&gt; This is email to Edison</span><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="实现方法包含2个以上的参数"><a href="#实现方法包含2个以上的参数" class="headerlink" title="实现方法包含2个以上的参数"></a>实现方法包含2个以上的参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Message</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(String name, String title)</span></span>;<br>&#125;  <br></code></pre></td></tr></table></figure>

<p>Lambda实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSIT</span> </span>&#123;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(Message message)</span> </span>&#123;  <br>        message.send(<span class="hljs-string">&quot;Edison&quot;</span>, <span class="hljs-string">&quot;Mr&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Test</span>  <br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_message_email</span><span class="hljs-params">()</span> </span>&#123;  <br>	    sendMessage((name, title) -&gt; &#123;  <br>	        System.out.println(<span class="hljs-string">&quot;This is email to &quot;</span> + title + <span class="hljs-string">&quot; &quot;</span> + name);  <br>	        <span class="hljs-comment">// console print =&gt; This is email to Mr Edison</span><br>	    &#125;);  <br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="具体实现包含返回值"><a href="#具体实现包含返回值" class="headerlink" title="具体实现包含返回值"></a>具体实现包含返回值</h4><p>我们修改下测试的interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Message</span> </span>&#123;  <br>    <span class="hljs-function">String <span class="hljs-title">send</span><span class="hljs-params">(String name, String title)</span></span>;<br>&#125; <br></code></pre></td></tr></table></figure>

<p>包含返回值的对应Lambda实现方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSIT</span> </span>&#123;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(Message message)</span> </span>&#123;  <br>        String status = message.send(<span class="hljs-string">&quot;Edison&quot;</span>, <span class="hljs-string">&quot;Mr&quot;</span>);  <br>        System.out.println(status);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_message_email</span><span class="hljs-params">()</span> </span>&#123;  <br>        sendMessage((name, title) -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;This is email to &quot;</span> + title + <span class="hljs-string">&quot; &quot;</span> + name);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success!&quot;</span>;  <br>        &#125;);  <br>    &#125;  <br>	<span class="hljs-comment">/*</span><br><span class="hljs-comment">	    console print =&gt; </span><br><span class="hljs-comment">	    This is email to Mr Edison</span><br><span class="hljs-comment">		success!</span><br><span class="hljs-comment">	*/</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>Lambda表达式也可以像普通变量那样赋值给变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test_message_email</span><span class="hljs-params">()</span> </span>&#123;  <br>	Message lambda = (name,title) -&gt; &#123;  <br>        System.out.println(<span class="hljs-string">&quot;This is a sms to &quot;</span>+title+<span class="hljs-string">&quot; &quot;</span> +name);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success!&quot;</span>;  <br>    &#125;;  <br>	sendMessage(lambda);  <br>	<span class="hljs-comment">/*</span><br><span class="hljs-comment">	    console print =&gt; </span><br><span class="hljs-comment">	    This is a sms to Mr Edison</span><br><span class="hljs-comment">		success!</span><br><span class="hljs-comment">	*/</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>有且只有一个抽象方法的interface上，同时我们称这样的接口为Functional Interface，同时我们可以在接口上加注解@FunctionalInterface  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Message</span> </span>&#123;  <br>    <span class="hljs-function">String <span class="hljs-title">send</span><span class="hljs-params">(String name,String title)</span></span>;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS文件系统</title>
    <url>/2023/02/15/NFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="NFS文件系统"><a href="#NFS文件系统" class="headerlink" title="NFS文件系统"></a>NFS文件系统</h3><p><img src="nfs.png" alt="nfs"></p>
<p><strong>NFS文件系统</strong></p>
<p>NFS是UNIX（Linux）系统之见进行文件共享的网络服务，<strong>NFS即网络文件系统（Network File System）</strong>，是主机间通过网络进行文件共享的网络协议。<strong>NFS服务器提供的共享目录可以被NFS客户机作为文件系统挂载到目录（挂载点）中</strong>。NFS最早是由Sun公司提出的。</p>
<ul>
<li>1.NFS的用途</li>
</ul>
<p>NFS通常在局域网环境中使用，用于多于多台主机共享同一主机上的共享文件（目录）资源。由于NFS具有共享文件访问速度快、稳定性高等特点，在实际的生产系统中得到了广泛的应用。</p>
<p>对于使用NFS进行系统之间文件的共享，通常可以进行一下概括：</p>
<ul>
<li><p>NFS是系统间提供文件共享的一种网络协议，与HTTP和FTP等用于在网络中传输文件的协议不同，NFS不需要将文件从服务器下载到本地系统来访问文件。</p>
</li>
<li><p>在使用NFS协议进行文件共享的系统中，可划分为服务器和客户机两部分角色：NFS服务器输出共享的目录供其他主机访问，NFS客户机读取NFS服务器中的共享目录。</p>
</li>
<li><p>通过NFS网络协议，作为NFS客户端的主机可以把NFS服务器中输出的共享目录（NFS文件系统）直接挂载（mount）到本机文件系统中的挂载点（目录），并且像访问本地文件系统一样访问已经挂载NFS文件系统。</p>
</li>
<li><p>在同一台主机中即可以作为NFS服务器为其他主机提供共享目录，也可以作为NFS客户机读取其他NFS服务器中的共享目录。</p>
</li>
</ul>
<p><strong>NFS有三个主流发行版本</strong>：</p>
<ol>
<li><p> NFSv2</p>
</li>
<li><p>NFSv3</p>
</li>
<li><p>NFSv4.</p>
</li>
</ol>
<p>CentOS6/REHEL6默认的NFS共享服务支持所有三个版本的客户端连接。</p>
<p>NFS协议</p>
<p>NFSv2、NFSv3默认需要使用rpc服务，所以计算机的rpc服务必须启动：</p>
<p>rpc是远程进程调用，很多服务需要通过rpc获取一些端口信息，在Linux中rpc服务我们称之为rpcbind，我们可以将它通过以下命令启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">service rpcbind start<br>chkconfig rpcbind on<br></code></pre></td></tr></table></figure>

<p>NFSv4不再需要rpc支持，并且是防火墙友好的。</p>
<p>NFSv2、NFSv3既可以使用TCP协议进行传输、也可以使用UDP协议，UDP协议效率较高，但是不保证传输可靠性，不建议使用。NFSv4使用TCP协议进行传输。</p>
<p>NFS服务默认是安装的，我们可以通过以下命令可以启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">service nfs start<br>chkconfig nfs on<br></code></pre></td></tr></table></figure>

<p>默认NFS需要使用5个端口，其中4个是动态的（nfs工作需要的端口），以及rpc服务的端口，动态端口无法通过防火墙，如果需要通过防火墙，则需要配置NFS使用指定的静态端口：</p>
<p>配置NFS的配置文件/etc/sysconfig/nfs,添加静态端口设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">MOUNT_PORT=&quot;4001&quot;		#挂载使用端口*<br>STATD_PORT=&quot;4002&quot;		#状态使用端口*<br>LOCKD_TCPPORT=&quot;4003&quot;	#TCP锁使用端口*<br>LOCKD_UDPPORT=&quot;4004&quot;	#UDP锁使用端口*<br></code></pre></td></tr></table></figure>

<p>防火墙需要配置允许以上端口，以及NFS协议的2049端口，RPC的111端口允许通过，才能正常使用NFS。</p>
<p><strong>NFS共享配置</strong></p>
<p>NFS服务的共享配置文件为/etc/exports</p>
<p>每一共享占用一行，格式如下：</p>
<p>在允许的客户机处，我们可以选择一个网段，或者一个固定的主机IP地址，也可以是域名。</p>
<p>共享目录   允许的客户主机（选项）</p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/bxy-nfs   192.168.0.0/24(ro,saync)<br>/bxy-nfs   192.168.0.133(rw,sync)<br>/bxy-nfs   *.bxy.com<br><span class="hljs-meta">#</span><span class="bash"> 配置好共享后，可以使用以下命令启动共享：*</span><br>service nfs start<br><span class="hljs-meta">#</span><span class="bash"> 或</span><br>exportfs -r<br><span class="hljs-meta">#</span><span class="bash"> 可以通过以下命令查看当前共享状态</span><br>exportfs –v 	<br></code></pre></td></tr></table></figure>

<p>NFS共享选项</p>
<p>默认选项如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">-ro				# 只读共享<br>-sync			# 所有操作返回前必须已经写入磁盘<br>-wdelay     	# 延迟写操作，等待更多的写操作一起执行<br>-root_squash	# 防止远程root用户使用root权限对共享进行访问<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 常用选项：</span><br>-rw   			# 读写共享<br>-async          # 操作可以延迟写入磁盘，立即响应，可提高速度<br>-no_wdelay      # 关闭写延迟，需要与sync选项同时使用<br>-no_root_squash # 关闭root_squash<br></code></pre></td></tr></table></figure>

<p>客户端挂载NFS共享</p>
<p>客户端可以通过mount命令挂载NFS共享，命令格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mount -t nfs 192.168.1.100:/bxy-nfs /mnt<br></code></pre></td></tr></table></figure>

<p>注：这里的192.168.1.100就是NFS服务器所在的地址</p>
<p>也可以将配置信息写入到/etc/fstab中，在启动时自动挂载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">192.168.1.100:/bxy-nfs /mnt nfs defaults 0 0<br></code></pre></td></tr></table></figure>

<p>挂载的时候可以使用-o指定挂载选项，常用选项如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">-ro 		# 只读挂载<br>-rw 		# 读写挂载<br>-vers=4 	# 指定使用NFSv4方式挂载<br><span class="hljs-meta">#</span><span class="bash"> 例如：</span><br>mount -t nfs 192.168.1.100:/bxy-nfs /mnt –rw<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Postfix环境搭建</title>
    <url>/2023/03/19/Postfix%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Postfix"><a href="#Postfix" class="headerlink" title="Postfix"></a>Postfix</h1><h2 id="电子邮件系统"><a href="#电子邮件系统" class="headerlink" title="电子邮件系统"></a>电子邮件系统</h2><p>电子邮件系统由用户代理MUA（Mail User Agent）以及邮件传输代理MTA（Mail Transfer Agent）,MDA（Mail Delivery Agent）邮件投递代理组成，MUA指用于收发Mail的程序，MTA指将来自MUA的信件转发给指定用户的程序，MDA就是将MTA接收的信件依照信件的流向（送到哪里）将该信件放置到本机账户下的邮件文件中（收件箱），当用户从 MUA 中发送一份邮件时，该邮件会被发送送到MTA，而后在一系列MTA中转发，直到它到达最终发送目标为止。<br><img src="postfix.png" alt="postfix">                               </p>
<p><strong>MUA（Mail User Agent），称之为邮件用户代理，用户通过MUA接收邮件</strong></p>
<p>常见的MUA软件有：</p>
<ol>
<li>Outlook</li>
<li>Mac Mail</li>
<li>Thunderbird</li>
<li>Foxmail</li>
<li>Mutt</li>
</ol>
<p>对于个人用户来讲，可能使用的最多还是网页方式查看电子邮件，这些网页也可以成为基于Web的MUA。</p>
<p><strong>IMAP、POP3</strong></p>
<p>MUA接受邮件使用的是IMAP或POP3这种标准邮件接收协议</p>
<p>IMAP、POP3负责从邮件服务器上将特定用户的邮件抓取下来</p>
<p>我们可以控制抓取后是否在邮件服务器上保存邮件</p>
<p>I<strong>MAP主要优势在于客户端的所有操作都与邮件服务器同步，而POP3则是将邮件下载下来，所有的操作都在本地，不影响服务器上保存的邮件。</strong></p>
<p><strong>IMAP的用户体验更好。</strong></p>
<p>MTA</p>
<p>SMTP（Simple Mail Transfer Prorocol）是邮件发送的标准协议，MUA通过SMTP协议与邮件服务器通信，实现邮件发送。</p>
<p>SMTP就是我们所说的MTA（Mail Transfer Protocol）</p>
<p>所有的MTA都是对SMTP的一种实现</p>
<p>Linux中最主流的MTA有：sendmail、postfix</p>
<p>MTA只负责邮件传输，邮件保存是有MDA完成的。</p>
<p>MDA</p>
<p>MDA（Mail Deliver Agent）负责将MTA接受到的邮件保存哎邮件服务器上，通常MTA与MDA是紧紧结合在一起的。</p>
<p>Linux上，邮件默认保存目录是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">/var/spool/mail/username<br></code></pre></td></tr></table></figure>

<p>MDA除了保存邮件，更重要的是对邮件进行垃圾邮件处理和病毒扫描。</p>
<p>Linux常用的MDA有：procmail、maildrop</p>
<p>Sendmail、postfix默认使用的MDA是promail</p>
<p>MRA</p>
<p>MRA（Mail Receive Agent）实现IMAP、POP3等协议，负责与MUA交互，将服务器上的邮件通过IMAP或者POP3协议递送给客户端。</p>
<p>Linux下使用最广泛的的MRA是：Dovecot</p>
<p>为了安全起见，现代邮件一般会使用数字证书对传输协议进行加密，所以一啊不能需要支持的协议有：IMAP，POP3，IMAPS和POPS。</p>
<h2 id="postfix简介"><a href="#postfix简介" class="headerlink" title="postfix简介"></a>postfix简介</h2><p>postfix是Wietse Venema在IBM的GPL协议之下开发的MTA（邮件传输代理）软件。postfix是Wietse Venema想要为使用最广泛的sendmail提供替代品的一个尝试。在Internet世界中，大部分的电子邮件都是通过sendmail来投递的，大约有100万用户使用sendmail，每天投递上亿封邮件。这真是一个让人吃惊的数字。Postfix试图更快、更容易管理、更安全，同时还与sendmail保持足够的兼容性。<br><img src="mail.png" alt="mail"><br><strong>postfix的优势：</strong></p>
<ol>
<li>postfix速度比sendmail约快3倍</li>
<li>更加稳定健壮</li>
<li>配置更加灵活</li>
<li>大多数postfix进程运行在较低的权限下，安全性更高</li>
</ol>
<h2 id="安装postfix"><a href="#安装postfix" class="headerlink" title="安装postfix"></a>安装postfix</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install –y postfix<br></code></pre></td></tr></table></figure>

<h3 id="配置postfix"><a href="#配置postfix" class="headerlink" title="配置postfix"></a>配置postfix</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改主配置文件</span><br>[root@localhost postfix]<span class="hljs-comment"># vim main.cf		</span><br><br><span class="hljs-comment">#主要配置如下几个地方</span><br><span class="hljs-comment">#本机主机名</span><br>myhostname = mail.example.com<br><span class="hljs-comment">#域名</span><br>mydomain = example.com				<br><span class="hljs-comment">#设置由本机寄出去的邮件所使用的域名或主机名</span><br>myorigin = <span class="hljs-variable">$mydomain</span>			   		<br><span class="hljs-comment">#postfix所监听的网络</span><br>inet_interfaces = all			    <br><span class="hljs-comment">#设置可接受邮件的主机名和域名</span><br>mydestination = <span class="hljs-variable">$myhostname</span>, localhost.<span class="hljs-variable">$mydomain</span>, localhost, example.com	<br><span class="hljs-comment">#设置在什么网络内收发邮件</span><br>mynetworks = 192.169.0.0/24		   <br><span class="hljs-comment">#设置在什么网域内收发邮件</span><br>relay_domains = <span class="hljs-variable">$mydestination</span>	   <br><br><br>[root@localhost postfix]<span class="hljs-comment"># service postfix restart</span><br>关闭 postfix：                                             [确定]<br>启动 postfix：                                             [确定]<br><span class="hljs-comment">#切换默认的MTA</span><br>alterconfig –config mta，在选项中勾选postfix<br></code></pre></td></tr></table></figure>

<h2 id="dovecot配置"><a href="#dovecot配置" class="headerlink" title="dovecot配置"></a>dovecot配置</h2><p>安装dovecot</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install –y dovecot<br></code></pre></td></tr></table></figure>

<p>开启支持的协议<br><img src="code.png" alt="code"><br><strong>发送测试邮件：</strong></p>
<p>mail –vs “test” <a href="mailto:kobe@bxy.com">kobe@bxy.com</a></p>
<p>练习：</p>
<ol>
<li>配置foxmail</li>
<li>搭建webmail</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQT5 GUI中内置CMD</title>
    <url>/2023/09/26/PyQT5-GUI%E4%B8%AD%E5%86%85%E7%BD%AECMD/</url>
    <content><![CDATA[<blockquote>
<p>PyQt实现了一个Python模块集。它有超过300类，将近6000个函数和方法。它是一个多平台的工具包，可以运行在所有主要操作系统上，包括UNIX，Windows和Mac。 PyQt采用双许可证，开发人员可以选择GPL和商业许可。在此之前，GPL的版本只能用在Unix上，从PyQt的版本4开始，GPL许可证可用于所有支持的平台。</p>
</blockquote>
<p><img src="qt.png" alt="qt"></p>
<h3 id="直接在QT中内置CMD"><a href="#直接在QT中内置CMD" class="headerlink" title="直接在QT中内置CMD"></a>直接在QT中内置CMD</h3><p>在PyQT5下，将CMD应用直接内置到窗体应用中去：</p>
<p><img src="qt1.png" alt="qt1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> win32gui<br><br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QProcess, Qt<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QWindow, QIcon, QFont<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMdiArea, QSplitter, QTextBrowser<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QWidget, QApplication, QVBoxLayout<br><span class="hljs-keyword">from</span> win32com <span class="hljs-keyword">import</span> client<br><span class="hljs-keyword">from</span> win32gui <span class="hljs-keyword">import</span> GetWindowText, EnumWindows,SetForegroundWindow<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span>(<span class="hljs-params">QMainWindow</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.p = QProcess()<br>        self.layout = QVBoxLayout()<br>        self.mdi = QMdiArea()<br>        self.mainSplitter = QSplitter(Qt.Vertical)<br>        self.setCentralWidget(self.mainSplitter)<br>        self.mainSplitter.addWidget(QTextBrowser())<br>        self.initUI()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initUI</span>(<span class="hljs-params">self</span>):</span><br>        self.runExe()<br>        EnumWindows(self.set_cmd_to_foreground, <span class="hljs-literal">None</span>)<br>        hwnd1 = win32gui.GetForegroundWindow()<br>        <span class="hljs-comment">#hwnd1 = win32gui.FindWindow(None, &quot;C:\\Windows\\system32\\calc.exe&quot;)</span><br>        <span class="hljs-built_in">print</span>(hwnd1)<br>        window = QWindow.fromWinId(hwnd1)<br>        container_widge = self.createWindowContainer(window, self)<br>        container_widge.setFocusPolicy(Qt.TabFocus)<br>        container_widge.setFocus()<br>        container_widge.setWindowTitle(<span class="hljs-string">&quot;ain&quot;</span>)<br>        container_widge.setFont(QFont(<span class="hljs-string">&quot;Times New Roman&quot;</span>))<br>        container_widge.setGeometry(<span class="hljs-number">500</span>, <span class="hljs-number">500</span>, <span class="hljs-number">450</span>, <span class="hljs-number">400</span>)<br>        <span class="hljs-comment">#container_widge.setFocusPolicy()</span><br>        container_widge.activateWindow()<br>        container_widge.acceptDrops()<br>        container_widge.grabMouse()<br>        container_widge.setMouseTracking(<span class="hljs-literal">True</span>)<br>        self.mainSplitter.addWidget(container_widge)<br>        self.showMaximized()<br>        <span class="hljs-comment">#self.setGeometry(200, 200, 700, 700)</span><br>        <span class="hljs-comment">#self.show()</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">runExe</span>(<span class="hljs-params">self</span>):</span><br>        shell.run(<span class="hljs-string">&quot;cmd.exe&quot;</span>)<br>        time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_cmd_to_foreground</span>(<span class="hljs-params">self, hwnd, extra</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;sets first command prompt to forgeround&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;cmd.exe&quot;</span> <span class="hljs-keyword">in</span> GetWindowText(hwnd):<br>            <span class="hljs-built_in">print</span>(hwnd)<br>            SetForegroundWindow(hwnd)<br>            <span class="hljs-keyword">return</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_script</span>(<span class="hljs-params">self, shell, scripts</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;runs the py script&quot;&quot;&quot;</span><br>        shell.SendKeys(scripts+<span class="hljs-string">&quot;&#123;ENTER&#125;&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    shell = client.Dispatch(<span class="hljs-string">&quot;WScript.Shell&quot;</span>)<br>    app = QApplication(sys.argv)<br>    ex = Example()<br>    <span class="hljs-comment">#ex.run_script(shell, &quot;python -m pip list&quot;)</span><br>    <span class="hljs-comment">#ex.show()</span><br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure>



<h3 id="将CMD命令结果返回到QT"><a href="#将CMD命令结果返回到QT" class="headerlink" title="将CMD命令结果返回到QT"></a>将CMD命令结果返回到QT</h3><p><img src="qt2.png" alt="qt2"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys  <br>  <br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QProcess, QTextStream  <br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QApplication, QMainWindow, QTextEdit, QLineEdit, QVBoxLayout, QHBoxLayout, QWidget, \  <br>    QPushButton  <br>  <br>  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainWindow</span>(<span class="hljs-params">QMainWindow</span>):</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>  <br>        <span class="hljs-built_in">super</span>().__init__()  <br>  <br>        self.process = QProcess(self)  <br>        self.output = QTextEdit(self)  <br>        self.<span class="hljs-built_in">input</span> = QLineEdit(self)  <br>        self.run_command_button = QPushButton(<span class="hljs-string">&quot;Run Command&quot;</span>, self)  <br>  <br>        layout = QVBoxLayout()  <br>        input_layout = QHBoxLayout()  <br>        input_layout.addWidget(self.<span class="hljs-built_in">input</span>)  <br>        input_layout.addWidget(self.run_command_button)  <br>        layout.addLayout(input_layout)  <br>        layout.addWidget(self.output)  <br>        central_widget = QWidget(self)  <br>        central_widget.setLayout(layout)  <br>        self.setCentralWidget(central_widget)  <br>  <br>        self.process.readyReadStandardOutput.connect(self.read_output)  <br>        self.run_command_button.clicked.connect(self.run_command)  <br>        self.process.start(<span class="hljs-string">&quot;cmd.exe&quot;</span>)  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_output</span>(<span class="hljs-params">self</span>):</span>  <br>        stream = QTextStream(self.process)  <br>        self.output.append(stream.readAll())  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_command</span>(<span class="hljs-params">self</span>):</span>  <br>        command = self.<span class="hljs-built_in">input</span>.text() + <span class="hljs-string">&quot;\n&quot;</span>  <br>        self.process.write(command.encode())  <br>  <br>  <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:  <br>    app = QApplication(sys.argv)  <br>    window = MainWindow()  <br>    window.show()  <br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure>



<p>QT QProcess调用py文件，使用readyReadStandardOutput()无法获得信号的解决办法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解决办法是在py文件的每一行print()后面添加一行代码</span><br>sys.stdout.flush()<br></code></pre></td></tr></table></figure>

<p>因为python中print()一次并不是立即打印，而是要等缓冲区满了再打印，用这种办法强制刷新缓冲区后，可以立即触发信号。</p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytest使用介绍</title>
    <url>/2022/01/18/Pytest%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="unittest-vs-pytest"><a href="#unittest-vs-pytest" class="headerlink" title="unittest vs pytest"></a>unittest vs pytest</h3><table>
<thead>
<tr>
<th>item</th>
<th>unittest</th>
<th>pytest</th>
</tr>
</thead>
<tbody><tr>
<td>用例编写规则</td>
<td>1.测试文件必须先import unittest<br>2.测试类必须继承unittest.TestCase<br>3.测试方法必须以”test_”开头<br>4.测试类必须要有unittest.main()方法</td>
<td>1.测试文件名必须以”test_”开头或者”_test”结尾（如：test_ab.py）<br>2.测试方法必须以”test_”开头<br>3.测试类命名以”Test”开头</td>
</tr>
<tr>
<td>用例分类执行</td>
<td>默认执行全部用例，也可以通过加载testsuit，执行部分用例。</td>
<td>可以通过@pytest.mark来标记类和方法，pytest.main加入参数(“-m”)可以只运行标记的类和方法</td>
</tr>
<tr>
<td>用例前置和后置</td>
<td>提供了setUp/tearDown，只能针对所有case</td>
<td>pytest中的fixture显示更加灵活。可以任意自定义方法函数，只要加上@pytest.fixture()这个装饰器，那么被装饰的方法就可以被使用</td>
</tr>
<tr>
<td>参数化</td>
<td>需要依赖ddt库</td>
<td>使用@pytest.mark.parametrize装饰器</td>
</tr>
<tr>
<td>断言</td>
<td>很多断言格式<br>1.assertEqual<br>2.assertln<br>3.assertTrue<br>4.assertFalse</td>
<td>只有assert一个表达式，用起来比较方便</td>
</tr>
<tr>
<td>报告</td>
<td>使用HTMLTestRunnerNew库</td>
<td>有pytest-HTML，allure插件</td>
</tr>
<tr>
<td>失败重跑</td>
<td>无此功能</td>
<td>pytest支持用例执行失败重跑，pytest-rerunfailures插件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Decorator</title>
    <url>/2024/08/03/Python-Decorator/</url>
    <content><![CDATA[<h3 id="Python-Decotator"><a href="#Python-Decotator" class="headerlink" title="Python Decotator"></a>Python Decotator</h3><p><img src="decorator.png" alt="decorator"></p>
<blockquote>
<p>装饰器（decorators）是 Python 中的一种高级功能，它允许你动态地修改函数或类的行为。</p>
<p>装饰器是一种函数，它接受一个函数作为参数，并返回一个新的函数或修改原来的函数。</p>
<p>装饰器的语法使用 <strong>@decorator_name</strong> 来应用在函数或方法上。</p>
<p>Python 还提供了一些内置的装饰器，比如 <strong>@staticmethod</strong> 和 <strong>@classmethod</strong>，用于定义静态方法和类方法。</p>
</blockquote>
<p><strong>装饰器的应用场景：</strong></p>
<ul>
<li><strong>日志记录</strong>: 装饰器可用于记录函数的调用信息、参数和返回值。</li>
<li><strong>性能分析</strong>: 可以使用装饰器来测量函数的执行时间。</li>
<li><strong>权限控制</strong>: 装饰器可用于限制对某些函数的访问权限。</li>
<li><strong>缓存</strong>: 装饰器可用于实现函数结果的缓存，以提高性能。</li>
</ul>
<p>我们先看下面这个例子，我们对hello()进行一些包装，实现一个记录函数运行时间的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">timing</span>(<span class="hljs-params">f</span>):</span><br>    <span class="hljs-keyword">return</span> f<br>    <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>hello = timing(hello)<br>hello()<br></code></pre></td></tr></table></figure>

<p>上面的这个例子我们调用timing，实际上返回的还是hello这个函数的，其实什么都没有做。在实际业务中，我们希望timing返回一个新的函数，调用新函数就相当于调用了hello，开发中习惯叫这个新函数wrapper。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">timing</span>(<span class="hljs-params">f</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>():</span><br>        <span class="hljs-keyword">return</span> f<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><br>hello = timing(hello)<br><span class="hljs-comment"># 我们在这里print hello 实际上已经指向wrapper</span><br><span class="hljs-built_in">print</span>(hello)<br>hello()<br></code></pre></td></tr></table></figure>

<p>我们简单实现以下函数计时器的逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">timing</span>(<span class="hljs-params">f</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>():</span><br>        start_time = time.time()<br>        result = f()<br>        end_time = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Total time =&gt; <span class="hljs-subst">&#123;end_time - start_time&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><br>hello = timing(hello)<br>hello()<br></code></pre></td></tr></table></figure>

<p>到此实际上我们已经实现了装饰器的功能，但这种写法有点奇怪，我们可以使用Python的语法糖来实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">timing</span>(<span class="hljs-params">f</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>():</span><br>        start_time = time.time()<br>        result = f()<br>        end_time = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Total time =&gt; <span class="hljs-subst">&#123;end_time - start_time&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timing</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><br>hello()<br></code></pre></td></tr></table></figure>

<h5 id="装饰器的参数处理"><a href="#装饰器的参数处理" class="headerlink" title="装饰器的参数处理"></a>装饰器的参数处理</h5><p>上面的例子是没有参数的情况，正常的业务处理中我们会面对各种各样的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">timing</span>(<span class="hljs-params">f</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        start_time = time.time()<br>        result = f(*args, **kwargs)<br>        end_time = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Total time =&gt; <span class="hljs-subst">&#123;end_time - start_time&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timing</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><br><span class="hljs-meta">@timing</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_one</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello, <span class="hljs-subst">&#123;name&#125;</span>&quot;</span>)<br><br>hello()<br>hello_one(<span class="hljs-string">&quot;Jim&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>我们可以在wrapper上加入可变参数，这样就可以适配所有的参数场景。</p>
<h5 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">timing</span>(<span class="hljs-params">f</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        start_time = time.time()<br>        result = f(*args, **kwargs)<br>        end_time = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Total time =&gt; <span class="hljs-subst">&#123;end_time - start_time&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@timing</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br><br>Foo()<br></code></pre></td></tr></table></figure>
<p>上面的代码创建 Foo() 实例时，装饰器 @timing 会记录类的构造函数执行所需的时间。因此，打印出来的时间表示了调用 Foo() 实例化对象的时间消耗。</p>
<p>我们以下面这样的一个场景做个总结：改造这个 timing 装饰器，使它接受一个外部变量，并且如果超时超过 5 秒钟，就打印外部传入的变量值，我们可以通过增加一个超时判断逻辑来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">timing</span>(<span class="hljs-params">f</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        <span class="hljs-comment"># 获取外部传入的 timeout_value</span><br>        timeout_value = kwargs.get(<span class="hljs-string">&#x27;timeout_value&#x27;</span>, <span class="hljs-literal">None</span>)  <br>        start_time = time.time()<br>        <span class="hljs-keyword">try</span>:<br>            result = f(*args, **kwargs)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;An error occurred: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        end_time = time.time()<br>        elapsed_time = end_time - start_time<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Total time =&gt; <span class="hljs-subst">&#123;elapsed_time&#125;</span> seconds&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> elapsed_time &gt; <span class="hljs-number">5</span>:<br>            <span class="hljs-comment"># 超时打印变量值</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Timeout exceeded! Timeout value: <span class="hljs-subst">&#123;timeout_value&#125;</span>&quot;</span>)  <br><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@timing</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">example_function</span>(<span class="hljs-params">timeout_value</span>):</span><br>    time.sleep(<span class="hljs-number">6</span>)  <span class="hljs-comment"># 模拟一个耗时 6 秒的操作</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Finished&quot;</span><br><br>example_function(timeout_value=<span class="hljs-string">&quot;超时错误&quot;</span>)<br><br><span class="hljs-comment"># 运行打印</span><br><span class="hljs-comment"># Total time =&gt; 6.001874685287476 seconds</span><br><span class="hljs-comment"># Timeout exceeded! Timeout value: 超时错误</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Enum小结</title>
    <url>/2022/08/14/Python-Enum%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>枚举类是一些具有特殊含义的类，比如用一个类表示月份，则该类的实例对象最多有 12 个，一周则有7个对象，Python 3.4 中新增加了 Enum 枚举类，对于这些实例化对象个数固定的类，可以用枚举类来定义。</p>
<h4 id="枚举类定义"><a href="#枚举类定义" class="headerlink" title="枚举类定义"></a>枚举类定义</h4><ul>
<li>只需要令其继承自 enum 模块中的 Enum 类，则证明这是一个枚举类</li>
<li>枚举类的每个成员都由 2 部分组成，分别为 name 和 value</li>
<li>name不允许重复，value允许重复</li>
<li>和普通类的用法不同，枚举类不能用来实例化对象</li>
<li>枚举类中各个成员的值，不能在类的外部做任何修改</li>
</ul>
<p>创建方式1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br>Colors = Enum(<span class="hljs-string">&quot;Colors&quot;</span>,(<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>))<br><span class="hljs-comment"># 未指定值，默认从 1 开始递增</span><br><span class="hljs-built_in">print</span>(Colors.red.value)<br><span class="hljs-built_in">print</span>(Colors.green.value)<br><span class="hljs-built_in">print</span>(Colors.blue.value)<br><span class="hljs-comment">### 运行结果</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>

<p>创建方式2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Color</span>(<span class="hljs-params">Enum</span>):</span><br>	red = <span class="hljs-number">1</span><br>	green = <span class="hljs-number">2</span><br>	blue = <span class="hljs-number">3</span><br><br><span class="hljs-built_in">print</span>(Color.red)<br><span class="hljs-built_in">print</span>(Color[<span class="hljs-string">&#x27;red&#x27;</span>])<br><span class="hljs-built_in">print</span>(Color(<span class="hljs-number">1</span>))<br><br><span class="hljs-built_in">print</span>(Color.red.value)<br><span class="hljs-built_in">print</span>(Color.red.name)<br><br><span class="hljs-keyword">for</span> color <span class="hljs-keyword">in</span> Color:<br>	<span class="hljs-built_in">print</span>(color)<br><span class="hljs-comment">### 运行结果</span><br>Color.red<br>Color.red<br>Color.red<br><span class="hljs-number">1</span><br>red<br>Color.red<br>Color.green<br>Color.blue<br></code></pre></td></tr></table></figure>

<p>使用方式1:正常使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(Color.red==Color.green)<br><span class="hljs-built_in">print</span>(Color.red.name <span class="hljs-keyword">is</span> Color.green.name)<br><span class="hljs-comment">### 运行结果</span><br><span class="hljs-literal">False</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>

<p>2:不能在类的外部做任何修改，下面语法的做法是错误的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Color.red = <span class="hljs-number">4</span><br>报错：<br>    <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&#x27;Cannot reassign members.&#x27;</span>)<br>AttributeError: Cannot reassign members.<br></code></pre></td></tr></table></figure>

<p>3:枚举类中各个成员必须保证 name 互不相同，但 value 可以相同，举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Color</span>(<span class="hljs-params">Enum</span>):</span><br>	red=<span class="hljs-number">1</span><br>	green=<span class="hljs-number">1</span><br>	blue=<span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(Color[<span class="hljs-string">&#x27;green&#x27;</span>])<br><span class="hljs-comment">### 运行结果</span><br>Color.red<br></code></pre></td></tr></table></figure>

<p>可以看到，Color 枚举类中 red 和 green 具有相同的值（都是 1），Python 允许这种情况的发生，它会将 green 当做是 red 的别名，因此当访问 green 成员时，最终输出的是 red。</p>
<p>4:设置value唯一性，不允许出现相同的value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#引入 unique</span><br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum,unique<br><span class="hljs-comment">#添加 unique 装饰器</span><br><span class="hljs-meta">@unique</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Color</span>(<span class="hljs-params">Enum</span>):</span><br>    <span class="hljs-comment"># 为序列值指定value值</span><br>    red = <span class="hljs-number">1</span><br>    green = <span class="hljs-number">1</span><br>    blue = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(Color[<span class="hljs-string">&#x27;green&#x27;</span>])<br><br><span class="hljs-comment">### 运行结果报错：</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;test.py&quot;</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Color</span>(<span class="hljs-params">Enum</span>):</span><br>  File <span class="hljs-string">&quot;/python3.6/lib/enum.py&quot;</span>, line <span class="hljs-number">834</span>, <span class="hljs-keyword">in</span> unique<br>    (enumeration, alias_details))<br>ValueError: duplicate values found <span class="hljs-keyword">in</span> &lt;enum <span class="hljs-string">&#x27;Color&#x27;</span>&gt;: green -&gt; red<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RobotFramework学习笔记</title>
    <url>/2021/10/10/RobotFramework%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="一、RobotFramework简介和特点"><a href="#一、RobotFramework简介和特点" class="headerlink" title="一、RobotFramework简介和特点"></a>一、RobotFramework简介和特点</h3><blockquote>
<p>简介：RF是一个基于Python语言开发的，可扩展的，是以关键字驱动模式的自动化测试框架，RF最新的版本是2019年的7月份发布的，7月份之前只能支持到Python2.7，目前的最新版本已经可以支持到Python3.7</p>
</blockquote>
<h4 id="关键字驱动和数据驱动的区别？"><a href="#关键字驱动和数据驱动的区别？" class="headerlink" title="关键字驱动和数据驱动的区别？"></a>关键字驱动和数据驱动的区别？</h4><ul>
<li><p>关键字驱动：表示把项目中的一些逻辑封装成关键字（一个函数,例如login,register）,调用不同的关键字组合实现不同地 业务逻辑，从而驱动测试用例的执行。</p>
</li>
<li><p>数据驱动：数据驱动是把测试用例里面的数据提取到Excel或者YAML文件里面，然后通过改变Excel或者YAML中的数据驱动测试用例执行。</p>
</li>
</ul>
<p>特点：</p>
<ol>
<li>编写用例简单，可以用robot,txt,tsv或html的格式编写用例。</li>
<li>自动生成HTML格式的测试报告和日志。(HTMLTestRunner.py,allure)</li>
<li>除了自带的类库外，还有很多的使用的扩展类库。</li>
<li>可以根据项目需要自定义一些关键字。</li>
<li>可以使用GUI的方式运行，可以和SVN、GIT以及Jenkins集成</li>
</ol>
<h3 id="二、RF环境安装"><a href="#二、RF环境安装" class="headerlink" title="二、RF环境安装"></a>二、RF环境安装</h3><ol>
<li><p>安装Python3.7.3（过高的python版本可能存在兼容性问题），并配置环境变量</p>
</li>
<li><p>使用管理员的身份打开DOS窗口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装</span><br>pip install robotframework==3.1<br><span class="hljs-comment">#卸载</span><br>pip uninstall robotframework<br></code></pre></td></tr></table></figure>
</li>
<li><p>在DOS窗口安装RIDE工具。（开发IDE）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装</span><br>pip install robotframework-ride<br><span class="hljs-comment">#卸载</span><br>pip uninstall robotframework-ride<br></code></pre></td></tr></table></figure>
</li>
<li><p>运行RIDE图标或者DOS窗口输入ride.py</p>
</li>
</ol>
<h3 id="三、创建RF项目"><a href="#三、创建RF项目" class="headerlink" title="三、创建RF项目"></a>三、创建RF项目</h3><ol>
<li>创建项目：new project<ol>
<li>注意：输入项目名称，选则项目路径，选则Dictionary目录</li>
</ol>
</li>
<li>创建测试套件（是测试用例的载体） new testsuite<ol>
<li>注意：选则File</li>
<li>关注：Edit页签，主要有四大块<ol>
<li>Setting设置：<ol>
<li>描述</li>
<li>测试套件之前的准备工作</li>
<li>测试套件之后的准备工作</li>
<li>测试用例之前的准备工作</li>
<li>测试用例之后的准备工作</li>
<li>测试用例模板</li>
<li>测试用例超时的时间</li>
<li>强制标记</li>
<li>默认标记</li>
</ol>
</li>
<li>Import导入外部文件</li>
<li>定义内部变量：</li>
<li>定义元数据：</li>
</ol>
</li>
</ol>
</li>
<li>创建测试用例 new testcase</li>
<li>创建业务关键字（资源文件，它是自定义关键字的载体。） new resource<ol>
<li>注意:只能在文件夹下面创建，并且是txt格式。</li>
</ol>
</li>
<li>创建用户自定义关键字 new user keyword</li>
</ol>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>RobotFramework</tag>
      </tags>
  </entry>
  <entry>
    <title>Python loguru</title>
    <url>/2024/01/14/Python-loguru/</url>
    <content><![CDATA[<h3 id="Python-loguru"><a href="#Python-loguru" class="headerlink" title="Python loguru"></a>Python loguru</h3><blockquote>
<p>在使用Python进行程序开发的过程中，会遇到需要记录的日志的需求，常常会用到Python自带的logging模块，但是logging需要我们进行不同的初始化等相关工作。对应不熟悉该模块的同学来说，还是有些费劲的，比如需要配置 Handler/Formatter 等。而且随着业务的复杂度提升, 对日志收集有着更高的要求, 例如: 日志分类, 文件存储, 异步写入, 自定义类型等等。</p>
<p>loguru 是一个 Python 简易且强大的第三方日志记录库，该库旨在通过添加一系列有用的功能来解决标准记录器的注意事项，从而减少 Python 日志记录的痛苦。</p>
</blockquote>
<p><img src="loguru.png" alt="loguru"></p>
<h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip install loguru<br></code></pre></td></tr></table></figure>

<h4 id="log-to-console"><a href="#log-to-console" class="headerlink" title="log to console"></a>log to console</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><br>logger.debug(<span class="hljs-string">&quot;That&#x27;s it, beautiful and simple logging!&quot;</span>)<br><br><span class="hljs-comment">#console print</span><br><span class="hljs-comment">#2024-01-14 08:47:45.344 | DEBUG    | __main__:&lt;module&gt;:3 - That&#x27;s it, beautiful and simple logging!</span><br></code></pre></td></tr></table></figure>

<h4 id="log-formatiing"><a href="#log-formatiing" class="headerlink" title="log formatiing"></a>log formatiing</h4><p><code>loguru</code>默认格式是时间、级别、名称+模块和日志内容，其中名称+模块是写死的，一般场景下不建议修改，但在业务复杂的场景下，自定义模块名称，是非常有用的，我们可以通过<code>logger.configure</code>手工指定模块名称。如下如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><br>logger.configure(handlers=[<br>    &#123;<br>        <span class="hljs-string">&quot;sink&quot;</span>: sys.stderr,<br>        <span class="hljs-string">&quot;format&quot;</span>: <span class="hljs-string">&quot;&#123;time:YYYY-MM-DD HH:mm:ss.SSS&#125; |&lt;lvl&gt;&#123;level:8&#125;&lt;/&gt;| &#123;name&#125; : &#123;module&#125;:&#123;line:4&#125; | &lt;cyan&gt;mymodule&lt;/&gt; | - &lt;lvl&gt;&#123;message&#125;&lt;/&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;colorize&quot;</span>: <span class="hljs-literal">True</span><br>    &#125;,<br>])<br><br>logger.debug(<span class="hljs-string">&#x27;this is debug&#x27;</span>)<br>logger.info(<span class="hljs-string">&#x27;this is info&#x27;</span>)<br>logger.warning(<span class="hljs-string">&#x27;this is warning&#x27;</span>)<br>logger.error(<span class="hljs-string">&#x27;this is error&#x27;</span>)<br>logger.critical(<span class="hljs-string">&#x27;this is critical&#x27;</span>)<br>logger.info(<span class="hljs-string">&quot;this is &#123;&#125;&quot;</span>, <span class="hljs-string">&quot;a info log&quot;</span>)<br>logger.info(<span class="hljs-string">&quot;this is &#123;&#125;&quot;</span>, <span class="hljs-number">3</span>)<br>logger.info(<span class="hljs-string">&quot;this is &#123;:.2f&#125;&quot;</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><br>logger.remove()<br>logger.add(sys.stdout, <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;&#123;time:YYYY-MM-DD at HH:mm:ss&#125; | &lt;red&gt;&#123;level&#125;&lt;/red&gt; | &lt;green&gt;&#123;file&#125;&lt;/green&gt; | &lt;b&gt;&lt;i&gt;&#123;message&#125;&lt;/i&gt;&lt;/b&gt;&quot;</span>)<br>logger.info(<span class="hljs-string">&quot;Hello, world!&quot;</span>)<br>logger.info(<span class="hljs-string">&quot;Hello, &#123;name&#125;!&quot;</span>, name=<span class="hljs-string">&quot;everyone&quot;</span>)<br><br></code></pre></td></tr></table></figure>



<p>在 <code>format</code> 中，可以通过 <code>&#123;param&#125;</code> 的形式设置内容，通过 <code>&lt;tag&gt;&lt;/tag&gt;</code> 的形式设置格式。</p>
<p>常见的内容参数有：</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">time</td>
<td align="center">时间</td>
</tr>
<tr>
<td align="center">level</td>
<td align="center">日志等级</td>
</tr>
<tr>
<td align="center">file</td>
<td align="center">文件名</td>
</tr>
<tr>
<td align="center">message</td>
<td align="center">日志信息</td>
</tr>
<tr>
<td align="center">path</td>
<td align="center">文件路径</td>
</tr>
<tr>
<td align="center">function</td>
<td align="center">函数</td>
</tr>
<tr>
<td align="center">line</td>
<td align="center">行数</td>
</tr>
<tr>
<td align="center">module</td>
<td align="center">模块</td>
</tr>
<tr>
<td align="center">process</td>
<td align="center">进程信息</td>
</tr>
<tr>
<td align="center">thread</td>
<td align="center">线程信息</td>
</tr>
<tr>
<td align="center">tzinfo</td>
<td align="center">时区信息</td>
</tr>
<tr>
<td align="center">exception</td>
<td align="center">异常信息</td>
</tr>
</tbody></table>
<h4 id="log-to-file"><a href="#log-to-file" class="headerlink" title="log to file"></a>log to file</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">logger.add(<span class="hljs-string">&quot;log/file_1.log&quot;</span>)  <span class="hljs-comment"># sink</span><br><br>logger.info(<span class="hljs-string">&quot;this is a info log&quot;</span>)<br></code></pre></td></tr></table></figure>

<h4 id="log-rotation"><a href="#log-rotation" class="headerlink" title="log rotation"></a>log rotation</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">logger.add(<span class="hljs-string">&quot;log/file_2.log&quot;</span>, rotation=<span class="hljs-string">&#x27;10 KB&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    logger.info(<span class="hljs-string">&quot;this is a info log&quot;</span>)<br>    logger.debug(<span class="hljs-string">&quot;this is a debug log&quot;</span>)<br>    logger.warning(<span class="hljs-string">&quot;this is a warning log&quot;</span>)<br>    logger.error(<span class="hljs-string">&quot;this is a error log&quot;</span>)<br>    logger.critical(<span class="hljs-string">&quot;this is a critical log&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>关于rptation参数还有常见的如下用法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, rotation=<span class="hljs-string">&quot;50 MB&quot;</span>)      <span class="hljs-comment"># 文件超过50M则另起一个文件</span><br>logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, rotation=<span class="hljs-string">&quot;00:00&quot;</span>)    <span class="hljs-comment"># 每天00:00另起一个文件</span><br>logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, rotation=<span class="hljs-string">&quot;1 week&quot;</span>)   <span class="hljs-comment"># 每周另起一个文件</span><br>logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, rotation=<span class="hljs-string">&quot;10 days&quot;</span>)  <span class="hljs-comment"># 每10天另起一个文件</span><br></code></pre></td></tr></table></figure>

<h4 id="其他常用设置"><a href="#其他常用设置" class="headerlink" title="其他常用设置"></a>其他常用设置</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># retention 参数可以设置日志保存时间，到时间后日志会自动清理，注意与 rotation 区分</span><br>logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, retention=<span class="hljs-string">&quot;10 days&quot;</span>)<br><br><span class="hljs-comment"># compression 可以对关闭的日志（如 rotation 处理的日志）进行压缩，节约空间</span><br>logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, compression=<span class="hljs-string">&quot;zip&quot;</span>)<br><br><span class="hljs-comment"># enqueue=True 可以支持异步写入，实现多进程安全</span><br>logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, enqueue=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># filter 参数可以设置日志的过滤规则</span><br><span class="hljs-comment"># 过滤不包含 hello 的日志</span><br>logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, <span class="hljs-built_in">filter</span>=<span class="hljs-keyword">lambda</span> x: <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> x[<span class="hljs-string">&quot;message&quot;</span>])<br><br><span class="hljs-comment"># encoding 设置编码方式</span><br><span class="hljs-comment"># level 设置日志等级，大于该等级的日志会被记录</span><br>logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>, level=<span class="hljs-string">&quot;INFO&quot;</span>)<br><br><span class="hljs-comment">#异步写入</span><br>logger.add(<span class="hljs-string">&quot;log.log&quot;</span>, enqueue=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#序列化为json写入</span><br>logger.add(<span class="hljs-string">&quot;log1.log&quot;</span>, serialize=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>

<h4 id="常用的推荐设置"><a href="#常用的推荐设置" class="headerlink" title="常用的推荐设置"></a>常用的推荐设置</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><br>logger_dir = <span class="hljs-string">&quot;./log&quot;</span>  <span class="hljs-comment"># 这里是日志的存放目录，需要根据你的项目进行修改</span><br><br>log_path = os.path.join(logger_dir, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;time.strftime(<span class="hljs-string">&quot;%Y%m&quot;</span>)&#125;</span>&#x27;</span>, <span class="hljs-string">&#x27;&#123;time:YYYY_MM_DD&#125;.log&#x27;</span>)<br>logger.add(<br>    log_path,<br>    rotation=<span class="hljs-string">&quot;00:00&quot;</span>,<br>    retention=<span class="hljs-string">&quot;30 days&quot;</span>,<br>    enqueue=<span class="hljs-literal">True</span>,<br>    encoding=<span class="hljs-string">&quot;utf-8&quot;</span>,<br>    level=<span class="hljs-string">&quot;INFO&quot;</span><br>)<br></code></pre></td></tr></table></figure>

<h4 id="与PyTest结合使用"><a href="#与PyTest结合使用" class="headerlink" title="与PyTest结合使用"></a>与PyTest结合使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">from</span> _pytest.logging <span class="hljs-keyword">import</span> LogCaptureFixture<br><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">some_func</span>(<span class="hljs-params">i, j</span>):</span><br>    logger.info(<span class="hljs-string">&#x27;Oh no!&#x27;</span>)<br>    logger.info(<span class="hljs-string">&#x27;haha&#x27;</span>)<br>    <span class="hljs-keyword">return</span> i + j<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">caplog</span>(<span class="hljs-params">caplog: LogCaptureFixture</span>):</span><br>    handler_id = logger.add(caplog.handler, <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;&#123;message&#125;&quot;</span>)<br>    <span class="hljs-keyword">yield</span> caplog<br>    logger.remove(handler_id)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_some_func_logs_warning</span>(<span class="hljs-params">caplog</span>):</span><br>    <span class="hljs-keyword">assert</span> some_func(-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) == <span class="hljs-number">2</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;Oh no!&quot;</span> <span class="hljs-keyword">in</span> caplog.text<br><br></code></pre></td></tr></table></figure>

<h4 id="简单封装日志方法"><a href="#简单封装日志方法" class="headerlink" title="简单封装日志方法"></a>简单封装日志方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-comment"># 获取项目路径</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_pro_path</span>():</span><br>    pro_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<br>    <span class="hljs-keyword">return</span> pro_path<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_logger</span>():</span><br>    logger.add(os.path.join(get_pro_path(), <span class="hljs-string">&quot;mytest.log&quot;</span>), rotation=<span class="hljs-string">&quot;500 MB&quot;</span>)<br>    <span class="hljs-keyword">return</span> logger<br><br></code></pre></td></tr></table></figure>
<h4 id="日志管理器类"><a href="#日志管理器类" class="headerlink" title="日志管理器类"></a>日志管理器类</h4><p>在日常使用中，我们可以封装一个日志管理器类，并在其中配置日志文件存储、日志轮转等功能。然后可以在其他文件中直接导入和使用。<br>log_manager.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogManager</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, log_file=<span class="hljs-string">&quot;app.log&quot;</span>, log_level=<span class="hljs-string">&quot;DEBUG&quot;</span>, rotation=<span class="hljs-string">&quot;1 MB&quot;</span>, retention=<span class="hljs-string">&quot;7 days&quot;</span></span>):</span><br>        self.log_file = log_file<br>        self.log_level = log_level<br>        self.rotation = rotation<br>        self.retention = retention<br>        self._configure_logger()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_configure_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;配置日志记录器&quot;&quot;&quot;</span><br>        log_path = os.path.join(os.getcwd(), self.log_file)<br>        <br>        <span class="hljs-comment"># 设置日志输出格式和级别</span><br>        logger.remove()  <span class="hljs-comment"># 移除默认配置</span><br>        logger.add(<br>            log_path, <br>            level=self.log_level, <br>            <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;&#123;time:YYYY-MM-DD HH:mm:ss&#125; | &#123;level&#125; | &#123;message&#125;&quot;</span>,<br>            rotation=self.rotation,  <span class="hljs-comment"># 设置文件轮转条件</span><br>            retention=self.retention,  <span class="hljs-comment"># 设置文件保留时间</span><br>            compression=<span class="hljs-string">&quot;zip&quot;</span>  <span class="hljs-comment"># 可选，压缩旧的日志文件</span><br>        )<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;返回logger实例&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> logger<br><br><span class="hljs-comment"># 创建全局的日志实例</span><br>log_manager = LogManager(log_file=<span class="hljs-string">&quot;app.log&quot;</span>)<br><br><span class="hljs-comment"># 获取日志对象</span><br>logger = log_manager.get_logger()<br><br></code></pre></td></tr></table></figure>
<p>现在我们可以在项目的其他文件中使用它</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> log_manager <span class="hljs-keyword">import</span> logger  <span class="hljs-comment"># 导入封装的logger</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">example_function</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        logger.info(<span class="hljs-string">&quot;Function started.&quot;</span>)<br>        <span class="hljs-comment"># 模拟一些操作</span><br>        result = <span class="hljs-number">10</span> / <span class="hljs-number">0</span>  <span class="hljs-comment"># 触发除零错误</span><br>        logger.info(<span class="hljs-string">f&quot;Function result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.error(<span class="hljs-string">f&quot;Error occurred: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    example_function()<br><br></code></pre></td></tr></table></figure>
<p>通过 loguru 和封装，您可以方便地管理和存储日志文件，支持文件轮转和日志保留。<br>你可以在多个模块中导入和使用同一个 logger 实例，支持跨文件调用。</p>
<h4 id="pytest-case调用"><a href="#pytest-case调用" class="headerlink" title="pytest case调用"></a>pytest case调用</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">loguru使用</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> public_fun.log_fun <span class="hljs-keyword">import</span> get_logger<br><span class="hljs-keyword">from</span> assertpy <span class="hljs-keyword">import</span> assert_that<br>logger = get_logger()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_fun1</span>():</span><br>    logger.info(<span class="hljs-string">&#x27;我需要比较1&#x27;</span>)<br>    assert_that(<span class="hljs-number">1</span>).is_not_equal_to(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python读取Excel例子</title>
    <url>/2020/02/23/Python%E8%AF%BB%E5%8F%96Excel%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<h3 id="Python读取Excel例子"><a href="#Python读取Excel例子" class="headerlink" title="Python读取Excel例子"></a>Python读取Excel例子</h3><h4 id="使用到flask和pandas"><a href="#使用到flask和pandas" class="headerlink" title="使用到flask和pandas"></a>使用到flask和pandas</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_excel</span>():</span><br>    df = pd.read_excel(<span class="hljs-string">&quot;./学生信息表.xlsx&quot;</span>)<br>    table_html = df.to_html()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">        &lt;html&gt;</span><br><span class="hljs-string">            &lt;body&gt;</span><br><span class="hljs-string">                &lt;h1&gt;学生信息表&lt;/h1&gt;</span><br><span class="hljs-string">                &lt;div&gt;<span class="hljs-subst">&#123;table_html&#125;</span>&lt;/div&gt;</span><br><span class="hljs-string">            &lt;/body&gt;</span><br><span class="hljs-string">        &lt;/html&gt;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure>

<ul>
<li>Excel  文件如下</li>
</ul>
<p><img src="excel.PNG" alt="excel"></p>
<ul>
<li>输出的HTML，使用<a href="http://localhost:5000访问：">http://localhost:5000访问：</a></li>
</ul>
<p><img src="html.PNG" alt="xueshengbiao"></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 笔记</title>
    <url>/2019/11/27/SpringBoot-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一-Spring-Boot入门"><a href="#一-Spring-Boot入门" class="headerlink" title="一. Spring Boot入门"></a>一. Spring Boot入门</h2><h3 id="1-Spring-Boot简介"><a href="#1-Spring-Boot简介" class="headerlink" title="1. Spring Boot简介"></a>1. Spring Boot简介</h3><blockquote>
<p>简化Spring应用开发的一个框架</p>
<p>整个Sping技术栈的一个大整合</p>
<p>J2EE开发的一站式解决方案</p>
</blockquote>
<h3 id="2-微服务"><a href="#2-微服务" class="headerlink" title="2. 微服务"></a>2. 微服务</h3><p>2014年，由Martin Fowler提出</p>
<p>微服务：架构风格（服务微化）<br>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；<br>每一个功能元素最终都是一个可独立替换和独立升级的软件单元；<br><a href="https://martinfowler.com/articles/microservices.html">详细参照微服务文档</a></p>
<h3 id="3-Spring-Boot-HelloWorld"><a href="#3-Spring-Boot-HelloWorld" class="headerlink" title="3. Spring Boot HelloWorld"></a>3. Spring Boot HelloWorld</h3><p>一个功能：<br>浏览器发送hello请求，服务器接收请求并处理，响应Hello World字符串；</p>
<h4 id="1-主程序类，主入口类"><a href="#1-主程序类，主入口类" class="headerlink" title="(1).主程序类，主入口类"></a>(1).主程序类，主入口类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个spring boot应用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldMainApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//spring应用启动起来</span><br>        SpringApplication.run(HelloWorldMainApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>@SpringBootApplication: Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类。</p>
<p>@SpringBootConfiguration:Spring Boot的配置类：<br>    标注在某个类上，表示这是一个Spring Boot的配置类；<br>    @Configuration：配置类上来标注这个注解<br>        配置类 —— 配置文件；配置类也是容器中的一个组件；@Component</p>
<p>@EnableAutoConfiguration：开启自动配置功能：<br>    以前我们需要配置的东西，Spring Boot帮助我们自动配置；@EnableAutoConfiguration告诉Spring Boot开启自动配置功能；这样自动配置才能生效；</p>
<h3 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4.配置文件"></a>4.配置文件</h3><h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="(1)配置文件"></a>(1)配置文件</h4><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">application.properties<br>application.yml/application.yaml<br></code></pre></td></tr></table></figure>

<p>配置文件的作用，修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好。</p>
<p>YAML-&gt;(YAML  Aln’t Markup Language)<br>YAML:以数据为中心，比json、xml等更适合做配置文件<br>YAML:配置例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure>

<h4 id="2-YAML语法"><a href="#2-YAML语法" class="headerlink" title="(2)YAML语法"></a>(2)YAML语法</h4><p>1、基本语法<br>K:V 表示一对键值对(空格必须有):<br>以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">path:</span>	<span class="hljs-string">/hello</span><br>  <span class="hljs-comment"># 属性和值也是大小写敏感；</span><br></code></pre></td></tr></table></figure>

<p>2、值的写法<br>字面量：普通的值(数字，字符串，布尔)<br>K:V:字面直接来写：<br>    字符串默认不用加上单引号或者双引号<br>    “”:双引号:不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思<br>    ‘’:  单引号:会转义字符，特殊字符最终只是一个普通的字符串变量<br>对象、Map(属性和值)(键值对)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment">#K:V</span><br><span class="hljs-comment">#对象还是K:V的方式</span><br><span class="hljs-attr">friends:</span><br>   	<span class="hljs-attr">lastName:</span> <span class="hljs-string">zhangsan</span><br>	<span class="hljs-attr">age:</span> <span class="hljs-number">20</span><br><span class="hljs-comment">#行内写法：</span><br><span class="hljs-attr">friend:</span> &#123;<span class="hljs-attr">lastName:</span> <span class="hljs-string">zhangsan</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">18</span>&#125;<br><span class="hljs-comment">#数组(List、Set)</span><br><br><span class="hljs-comment">#用-值表示数组中的一个元素</span><br><span class="hljs-attr">pets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">pig</span><br><span class="hljs-comment">#  行内写法：</span><br><span class="hljs-attr">pets:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]<br></code></pre></td></tr></table></figure>

<h4 id="3-获取配置文件值"><a href="#3-获取配置文件值" class="headerlink" title="(3)获取配置文件值"></a>(3)获取配置文件值</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//javaBean</span><br><span class="hljs-meta">@PropertySource</span><br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC笔记</title>
    <url>/2020/02/08/Spring-MVC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h4><p>Spring MVC是目前主流的实现MVC实际模式的企业级开发款框架，Spring框架的一个子模块，无需整合，开发起来更加便捷。</p>
<h5 id="什么是MVC实际模式"><a href="#什么是MVC实际模式" class="headerlink" title="什么是MVC实际模式"></a>什么是MVC实际模式</h5><p>将应用程序分为Controller、Modle、View三层，Controller接收客户端请求，调用Model生成业务数据，传递给View.</p>
<p>Spring MVC就是对这套流程的封装，屏蔽了很多底层代码，开发出接口，让开发者可以更加轻松、边界地完成基于MVC模式的Web开发。</p>
<h5 id="Spring-MVC的核心组件"><a href="#Spring-MVC的核心组件" class="headerlink" title="Spring MVC的核心组件"></a>Spring MVC的核心组件</h5><ul>
<li>DispatcherServlet：前置控制器，是整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合度，相当于总指挥。</li>
<li>Handler：处理器，完成具体的业务逻辑，相当于Servlet或Action。</li>
<li>HandlerMapping: DispatcherServlet 接收到请求之后，通过HandlerMapping将不同的请求映射到不同的Handler。</li>
<li>HandlerInterceptor: 处理器拦截器，是一个接口，如果需要完成一些拦截处理，那么可以实现该接口。</li>
<li>HandlerExecutionChain: 处理器执行链，半酣两部分内同：Handler和HandlerInterceptor（系统会有一个默认的HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。</li>
<li>HandlerAdapter：处理器设配器，Handler执行业务方法之前，需要进行一系列的操作，包括表单数据的验证，数据类型的转换，将表单数据封装到JavaBean，这些操作都是由HandlerAdapter完成，开发者只需要将注意力集中在业务逻辑的处理上，DispatcherServlet通过HandlerAdapter执行不同的Handler。</li>
<li>ModelAndView: 装在了模型数据和视图信息，作为Handler的处理结果，返回给DispatcherServlet。</li>
<li>ViewResolver：视图解析器，DispatcherServlet通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。</li>
</ul>
<h5 id="Spring-MVC的工作流程"><a href="#Spring-MVC的工作流程" class="headerlink" title="Spring MVC的工作流程"></a>Spring MVC的工作流程</h5><ul>
<li>客户端请求被DispatcherServlet接收</li>
<li>根据HandlerMapping映射到Handler</li>
<li>生成Handler和HandlerInterceptor</li>
<li>Handler和HandlerInterceptor以HandlerExecutionChain的形式一并返回给DispatcherServlet</li>
<li>DispatcherServlet通过HandlerAdapter调用Handler的方法完成业务逻辑处理</li>
<li>Handler返回一个ModelAndView给DispatcherServlet</li>
<li>DispatcherServlet将获取的ModelAndView对象传给ViewResolver视图解析器，讲逻辑视图解析为物理视图View。</li>
<li>ViewResolver返回一个View给DispatcherServlet。</li>
<li>DispatcherServlet根据View进行视图渲染（将模式数据Model填充到视图View中）</li>
<li>DispatcherServlet将渲染后的结果响应给客户端。</li>
</ul>
<blockquote>
<p>Sping MVC流程非常复杂，实际开发中很简单，因为大部分组件不需要开发者创建，管理，只需要通过配置文件的方式完成配置即可，真正需要开发者进行处理的只有Handler、View。</p>
</blockquote>
<h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><ul>
<li><p>创建Maven Project，pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>在web.xml中配置DispatcherServlet。</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>springmvc.xml配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自动扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceView&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>创建Handler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloHandler</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了index...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="Spring-MVC-注解"><a href="#Spring-MVC-注解" class="headerlink" title="Spring MVC 注解"></a>Spring MVC 注解</h4><ul>
<li>@RequestMapping</li>
</ul>
<p>Spring MVC通过@RequestMapping注解将URL请求与业务方法进行映射，同时在Handler的类定义处以及方法定义处都可以添加@RequestMapping，在类定义处添加，相当于客户端多了一层访问路径。</p>
<ul>
<li>@Controller</li>
</ul>
<p>@Controller在类定义处，将该类交给IoC容器来管理，同时使其成为一个控制器（结合springmvc.xml中的自动扫描开启），可以接收客户端请求。</p>
<ul>
<li><p>@RequestMapping相关参数</p>
<ul>
<li>value：指定URL请求的实际地址，是@RequestMapping的默认值。</li>
<li>method：指定请求的method类型，GET、POST、PUT、DELET</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了index...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>上述代码表示index方法只能接收GET请求。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>TestNG下DateProvider使用</title>
    <url>/2020/10/29/TestNG%E4%B8%8BDateProvider%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>@DateProvider可以用来做数据驱动，数据源文件可以是Excel，XML也可以是TXT文本。</p>
</blockquote>
<h3 id="1-DataProvider与Test方法在同一个class中"><a href="#1-DataProvider与Test方法在同一个class中" class="headerlink" title="1.DataProvider与Test方法在同一个class中"></a>1.DataProvider与Test方法在同一个class中</h3><p>Demo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestNGDemo</span> </span>&#123;<br>	<span class="hljs-comment">// DataProvide 作为数据提供者，提供几组数组，则引用他的test方法就会执行几次</span><br>	<span class="hljs-meta">@DataProvider(name = &quot;myData&quot;)</span><br>	<span class="hljs-keyword">public</span> Object[][] DataPrObjects() &#123;<br>		Object[][] obj = <span class="hljs-keyword">new</span> Object[][] &#123; &#123; <span class="hljs-string">&quot;a1&quot;</span>, <span class="hljs-string">&quot;a2&quot;</span> &#125;, &#123; <span class="hljs-string">&quot;b1&quot;</span>, <span class="hljs-string">&quot;b2&quot;</span> &#125;, &#123; <span class="hljs-string">&quot;c1&quot;</span>, <span class="hljs-string">&quot;c2&quot;</span> &#125; &#125;;<br>		<span class="hljs-keyword">return</span> obj;<br>	&#125;<br><br>	<span class="hljs-meta">@Test(dataProvider = &quot;myData&quot;)</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestDataProvider</span><span class="hljs-params">(String data1, String data2)</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;-&gt;&quot;</span> + data1 + <span class="hljs-string">&quot;:&quot;</span> + data2);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">[RemoteTestNG] detected TestNG version <span class="hljs-number">6</span><span class="hljs-variable">.11</span><span class="hljs-variable">.0</span><br>-&gt;a1:a2<br>-&gt;b1:b2<br>-&gt;c1:c2<br>PASSED: TestDataProvider(<span class="hljs-string">&quot;a1&quot;</span>, <span class="hljs-string">&quot;a2&quot;</span>)<br>PASSED: TestDataProvider(<span class="hljs-string">&quot;b1&quot;</span>, <span class="hljs-string">&quot;b2&quot;</span>)<br>PASSED: TestDataProvider(<span class="hljs-string">&quot;c1&quot;</span>, <span class="hljs-string">&quot;c2&quot;</span>)<br><br>===============================================<br>    Default test<br>    Tests run: <span class="hljs-number">3</span>, Failures: <span class="hljs-number">0</span>, Skips: <span class="hljs-number">0</span><br>===============================================<br><br><br>===============================================<br>Default suite<br>Total tests run: <span class="hljs-number">3</span>, Failures: <span class="hljs-number">0</span>, Skips: <span class="hljs-number">0</span><br>===============================================<br></code></pre></td></tr></table></figure>

<h3 id="2-DataProvider与Test方法不在同一个class中"><a href="#2-DataProvider与Test方法不在同一个class中" class="headerlink" title="2.DataProvider与Test方法不在同一个class中"></a>2.DataProvider与Test方法不在同一个class中</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestNGDemoNew</span> </span>&#123;<br>    <span class="hljs-comment">//在这个class中引用DataPro中的@DataProvider</span><br>    <span class="hljs-comment">//dataProviderClass填写@DataProvider所在类的全限定类名</span><br>	<span class="hljs-meta">@Test(dataProvider = &quot;myData&quot;,dataProviderClass = com.TestNGDemo.class)</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestDataProvider</span><span class="hljs-params">(String data1,String data2)</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;-&gt;&quot;</span>+data1+<span class="hljs-string">&quot;:&quot;</span>+data2);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">[RemoteTestNG] detected TestNG version <span class="hljs-number">6</span><span class="hljs-variable">.11</span><span class="hljs-variable">.0</span><br>-&gt;a1:a2<br>-&gt;b1:b2<br>-&gt;c1:c2<br>PASSED: TestDataProvider(<span class="hljs-string">&quot;a1&quot;</span>, <span class="hljs-string">&quot;a2&quot;</span>)<br>PASSED: TestDataProvider(<span class="hljs-string">&quot;b1&quot;</span>, <span class="hljs-string">&quot;b2&quot;</span>)<br>PASSED: TestDataProvider(<span class="hljs-string">&quot;c1&quot;</span>, <span class="hljs-string">&quot;c2&quot;</span>)<br><br>===============================================<br>    Default test<br>    Tests run: <span class="hljs-number">3</span>, Failures: <span class="hljs-number">0</span>, Skips: <span class="hljs-number">0</span><br>===============================================<br><br><br>===============================================<br>Default suite<br>Total tests run: <span class="hljs-number">3</span>, Failures: <span class="hljs-number">0</span>, Skips: <span class="hljs-number">0</span><br>===============================================<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Automation</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox虚拟机鼠标不能使用</title>
    <url>/2019/11/10/VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%BC%A0%E6%A0%87%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><p>1.Question：VirtualBox虚拟机鼠标不能使用</p>
<ul>
<li><p>在设置-显示-graphic Controller 里面选择VBoxVGA.</p>
</li>
<li><p><img src="vm.jpg" alt="vm_img"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite快速上手</title>
    <url>/2022/01/03/Vite%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<h3 id="Vite快速上手"><a href="#Vite快速上手" class="headerlink" title="Vite快速上手"></a>Vite快速上手</h3><p><strong>快速上手</strong></p>
<p>Vite官方目前提供了一个比较简单的脚手架：create-vite-app，可以使用这个脚手架快速创建一个使用Vite构建的Vue.js应用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ npm init vite-app &lt;project-name&gt;<br>$ <span class="hljs-built_in">cd</span> &lt;project-name&gt;<br>$ npm install<br>$ npm run dev<br></code></pre></td></tr></table></figure>

<p>如果使用yarn:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ yarn create vite-app &lt;project-name&gt;<br>$ <span class="hljs-built_in">cd</span> &lt;project-name&gt;<br>$ yarn<br>$ yarn dev<br></code></pre></td></tr></table></figure>

<blockquote>
<p>P.S.</p>
<p>npm init或者yarn create是这两个包管理工具提供的新功能。</p>
<p>其内部就是自动去安装一个create-<xxx>的模块（临时），然后自动执行这个模块中的bin。</p>
<p>例如：</p>
<p>yarn create react-app my-react-app就相当于先yarn gloable add create-react-app，然后自动执行create-react-app my-react-app</p>
</blockquote>
<p><strong>对比差异点</strong></p>
<p>打开生成的项目，会发现就是一个很普通的Vue.js应用，没有太多特殊的地方。</p>
<p>不过相比于之前vue-cli创建的项目或者是基于Webpack搭建的Vue.js项目，这里的开发依赖非常简单，只有vite和@vue/compiler-sfc.</p>
<p><strong>Vite带来的优势主要体现在提升开发者在开发过程中的体验。</strong></p>
<ul>
<li>Dev Server无需等待，即时启动</li>
<li>几乎实时的模块热更新</li>
<li>所需文件按需编译，避免编译用不到的文件</li>
<li>开箱即用，避免各种Loader和Plugin的配置</li>
</ul>
<p><strong>Vite的由来</strong></p>
<ul>
<li>如果应用比较复杂，使用Webpack的开发过程相对比没有那么丝滑。</li>
<li>Webpack Dev Serve冷启动时间会比较长</li>
<li>Webpack HMR热更新的反应速度比较慢</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows安装MongoDB</title>
    <url>/2020/01/11/Windows%E5%AE%89%E8%A3%85MongoDB/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>MongoDB官网下载链接：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></li>
<li>MongoDB官网安装教程：<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/</a></li>
<li>MongoDB 3.6.11版本，官网下载：<br>绿色版（.zip）：<a href="https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.6.11.zip">https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.6.11.zip</a><br>安装版（.msi）：<a href="https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.6.11-signed.msi">https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.6.11-signed.msi</a></li>
</ul>
</blockquote>
<h3 id="自定义安装（解压）到："><a href="#自定义安装（解压）到：" class="headerlink" title="自定义安装（解压）到："></a>自定义安装（解压）到：</h3><ul>
<li>例如：D:\Program Files\mongodb4.2.2</li>
</ul>
<h3 id="配置系统环境变量path："><a href="#配置系统环境变量path：" class="headerlink" title="配置系统环境变量path："></a>配置系统环境变量path：</h3><ul>
<li>配置到bin目录，并将目录加入到path中</li>
</ul>
<h3 id="在安装路径下创建文件夹和文件："><a href="#在安装路径下创建文件夹和文件：" class="headerlink" title="在安装路径下创建文件夹和文件："></a>在安装路径下创建文件夹和文件：</h3><ul>
<li>“/data” 和 “/log” 两个文件夹（”/data”文件夹下，用于存放数据库源数据；”/log”文件夹下，用于存放logger日志）；</li>
<li>在data文件夹下创建”/db”空文件夹；</li>
<li>在log文件夹下创建”mongo.log”空文件。</li>
</ul>
<h3 id="在安装路径下创建配置文件"><a href="#在安装路径下创建配置文件" class="headerlink" title="在安装路径下创建配置文件"></a>在安装路径下创建配置文件</h3> <figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#数据库文件的存放位置</span><br><span class="hljs-attr">dbpath</span>=<span class="hljs-string">D:\Program Files\mongodb4.2.2\data\db</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志文件存放的路径</span><br><span class="hljs-attr">logpath</span>=<span class="hljs-string">D:\Program Files\mongodb4.2.2\log\mongo.log</span><br></code></pre></td></tr></table></figure>

<h3 id="使用超级管理员权限运行CMD，并运行下面的命令，将MongoDB加入到系统服务"><a href="#使用超级管理员权限运行CMD，并运行下面的命令，将MongoDB加入到系统服务" class="headerlink" title="使用超级管理员权限运行CMD，并运行下面的命令，将MongoDB加入到系统服务."></a>使用超级管理员权限运行CMD，并运行下面的命令，将MongoDB加入到系统服务.</h3> <figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">mongod -<span class="hljs-literal">-config</span> <span class="hljs-string">&quot;D:\Program Files\mongodb4.2.2\mongo.config&quot;</span> -<span class="hljs-literal">-install</span> -<span class="hljs-literal">-serviceName</span> <span class="hljs-string">&quot;MongoDB&quot;</span><br></code></pre></td></tr></table></figure>

<h3 id="启动MongoDB服务"><a href="#启动MongoDB服务" class="headerlink" title="启动MongoDB服务"></a>启动MongoDB服务</h3> <figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">net <span class="hljs-built_in">start</span> MongoDB<br></code></pre></td></tr></table></figure>

<h3 id="停止MongoDB服务"><a href="#停止MongoDB服务" class="headerlink" title="停止MongoDB服务"></a>停止MongoDB服务</h3> <figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">net stop MongoDB<br></code></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>git clone中常见问题的总结</title>
    <url>/2020/11/15/git-clone%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="国内速度慢"><a href="#国内速度慢" class="headerlink" title="国内速度慢"></a>国内速度慢</h3><ul>
<li>方法1：重新设置全局的通信缓存大小，增加git缓冲区大小</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global http.postBuffer 524288000<br>git config --list<br></code></pre></td></tr></table></figure>

<ul>
<li>方法2: 浅层克隆，深度设置为1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> http://github.com/target.git --depth 1  <span class="hljs-comment"># target.git 为目标地址</span><br><span class="hljs-built_in">cd</span> target  <span class="hljs-comment">#先进入库路径下</span><br>git fetch --unshallow <span class="hljs-comment"># 获取完整库</span><br></code></pre></td></tr></table></figure>

<h3 id="证书错误"><a href="#证书错误" class="headerlink" title="证书错误"></a>证书错误</h3><blockquote>
<p>fatal: unable to access <a href="https://github.com/subying/jsbook.git/">https://github.com/subying/jsbook.git/</a>: SSL certificate problem: unable to get local issuer certificate<br>提示SSL证书错误。这个错误并不重要是系统证书的问题，系统判断到这个行为会造成不良影响，所以进行了阻止，只要设置跳过SSL证书验证就可以了</p>
</blockquote>
<ul>
<li>解决方法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global http.sslVerify <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令小结--健忘症患者必备(持续更新中)</title>
    <url>/2020/02/23/git%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93-%E5%81%A5%E5%BF%98%E7%97%87%E6%82%A3%E8%80%85%E5%BF%85%E5%A4%87/</url>
    <content><![CDATA[<h3 id="Git备忘录"><a href="#Git备忘录" class="headerlink" title="Git备忘录"></a>Git备忘录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#状态查看操作</span><br><span class="hljs-comment">#查看工作区，暂存区状态</span><br>git status<br><br><span class="hljs-comment">#添加操作</span><br><span class="hljs-comment">#将工作区的&quot;新建/修改&quot;添加到暂存区</span><br>git add [file name]<br><br><span class="hljs-comment">#提交操作</span><br><span class="hljs-comment">#将暂存区的内容提交到本地库</span><br>git commit -m <span class="hljs-string">&quot;commit messgae&quot;</span> [file name]<br><br><span class="hljs-comment">#查看历史记录操作</span><br><span class="hljs-comment">#多屏显示控制方式：（空格向下翻页，b向上翻页，q退出）</span><br>git <span class="hljs-built_in">log</span><br>git <span class="hljs-built_in">log</span> --pretty=oneline<br>git <span class="hljs-built_in">log</span> --oneline<br><br><span class="hljs-comment">#HEAD@&#123;移动到当前版本需要多少步&#125;</span><br>git reflog<br><br>89b2a4e (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: update testcase <span class="hljs-keyword">for</span> WeChat<br>2c8d14a HEAD@&#123;1&#125;: commit: add 2 testcases <span class="hljs-keyword">for</span> WeChat.<br><br><br><span class="hljs-comment">#删除文件并找回</span><br><br><span class="hljs-comment">#比较文件差异</span><br></code></pre></td></tr></table></figure>
<h3 id="Git工作流程图示"><a href="#Git工作流程图示" class="headerlink" title="Git工作流程图示"></a>Git工作流程图示</h3><p><img src="git.jpg" alt="git"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd服务简介</title>
    <url>/2023/02/20/vsftpd%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="FTP简介"><a href="#FTP简介" class="headerlink" title="FTP简介"></a>FTP简介</h2><p><img src="VSFTPD.png" alt="VSFTPD"></p>
<p>FTP是TCP/IP网络上两台计算机传送文件的协议，FTP是在TCP/IP网络和INTERNET上最早使用的协议之一。尽管World Wide Web(WWW)已经替代了FTP的大多数功能，FTP仍然是通过Internet把文件从客户机复制到服务器上的一种途径。FTP客户机可以给服务器发出命令来下载文件，上传文件，创建或改变服务器上的目录。原来的FTP软件多是命令行操作，有了像CUTEFTP这样的图形界面软件，使用FTP传输变得方便易学。主要使用它进行“上载”。即向服务器传输文件。由于FTP协议的传输速度比较快，我们在制作诸如“软件下载”这类网站时喜欢用FTP来实现，同时我们这种服务面向大众，不需要身份认证，即“匿名FTP服务器”。</p>
<p>FTP使用TCP协议作为底层传说协议，提供了数据传输的可靠性，FTP的标准端口为20，21，20是数据端口，21位指令接口。</p>
<h3 id="FTP主动模式"><a href="#FTP主动模式" class="headerlink" title="FTP主动模式"></a>FTP主动模式</h3><p><img src="zdmode.jpg" alt="zdmode"></p>
<h3 id="FTP被动模式"><a href="#FTP被动模式" class="headerlink" title="FTP被动模式"></a>FTP被动模式</h3><p><img src="bdmode.jpg" alt="bdmode"></p>
<p><strong>主动模式与被动模式的比较：</strong>     </p>
<p>主动FTP对FTP服务器的管理和安全很有利，但对客户端的管理不利，因为FTP服务器企图与客户端的高位随机端口建立连接，而这个端口很有可能被客户端的防火墙阻塞掉。被动FTP对FTP客户端的管理有利，但对服务器端的管理不利。因为客户端要与服务器端建立两个连接，其中一个连到一个高位随机端口，而这个端口很有可能被服务器端的防火墙阻塞掉。目前，ftp服务器一般工作在被动模式。</p>
<h3 id="vsftpd服务"><a href="#vsftpd服务" class="headerlink" title="vsftpd服务"></a>vsftpd服务</h3><p><strong>常见的FTP服务器程序</strong></p>
<ul>
<li><p>IIS（FTP）、Serv-U</p>
</li>
<li><p>wu-ftpd、Proftpd</p>
</li>
<li><p>vsftpd（Very Secure FTP Daemon）</p>
</li>
</ul>
<p>vsftpd 是“very secure FTP daemon”的缩写，安全性是它的一个最大的特点。vsftpd 是一个 UNIX 类操作系统上运行的服务器的名字，它可以运行在诸如 Linux、BSD、Solaris、 HP-UNIX等系统上面，是一个完全免费的、开发源代码的ftp服务器软件，支持很多其他的 FTP 服务器所不支持的特征。比如：非常高的安全性需求、带宽限制、良好的可伸缩性、可创建虚拟用户、支持IPv6、速率高等。</p>
<p>使用以下命令安装vsftpd:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install –y vsftpd<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> vsftpd的启动与关闭：</span><br>service vsftpd start<br>service vsftpd stop<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> vsftpd相关配置文件及目录如下：</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> vsftpd主配置文件</span><br>/etc/vsftpd/vsftpd.conf   <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 黑名单(不允许通过FTP登录)</span><br>/etc/vsftpd/ftpusers   <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 控制名单（由配置文件控制是白名单还是黑名单）</span><br>/etc/vsftpd/user_list  <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> ftp共享目录</span><br>/var/ftp                <br><br>/var/ftp/xferlog       <br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 用户控制列表文件</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 黑名单(不允许通过FTP登录)</span><br>/etc/vsftpd/ftpusers  <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 控制名单（由配置文件控制是白名单还是黑名单）</span><br>/etc/vsftpd/user_list  <br></code></pre></td></tr></table></figure>


<h3 id="vsftpd主配置文件"><a href="#vsftpd主配置文件" class="headerlink" title="vsftpd主配置文件"></a>vsftpd主配置文件</h3><p><strong>vsftpd的主配置文件/etc/vsftpd/vsftpd.conf</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 是否允许匿名用户访问，匿名用户访问的时候是被映射为系统的ftp用户，它的家目录为/var/ftp，故我们用匿名访问的时候，访问的是/var/ftp的目录（这个目录的权限请不要随意改动，如果改动可能造成无法访问）。</span><br>anonymous_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 是否允许本地用户登录ftp，登录之后是用户的家目录，但uid号小于500的用户都不允许登录</span><br>local_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 本地用户是否有上传权限</span><br>write_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 本地用户上传的文件的反向掩码。而用户访问ftp对文件的实际权限是：所访问目录和这个文件权限的交集</span><br>local_umask=022<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 是否允许匿名用户上传文件</span><br>anon_upload_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 匿名用户是否有创建目录的权限</span><br>anon_mkdir_write_enable=NO<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 匿名用户是否有删除和重名名文件的权限</span><br>anon_other_write_enable=NO<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 匿名用户只能下载全局可读的文件，即文件的属组，属主，其他用户都有读权限</span><br>anon_world_readable_only=NO<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 当用户切换目录时，定义的欢迎信息。可以在家目录中定义一个.message的文件</span><br>dirmessage_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 是否打开传输日志</span><br>xferlog_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 是否启用20号端口进行数据传输，这样会工作在主动模式</span><br>connect_from_port_20=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 当用户上传了文件，是否更改该上传的文件属主，并且属主更改为哪个用户</span><br>chown_uploads=YES<br>chown_username=whoever<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 定义传输日志的位置，默认在/var/<span class="hljs-built_in">log</span>/messages中</span><br>xferlog_file=/var/log/xferlog<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 定义日志的格式</span><br>xferlog_std_format=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 会话的超时时间</span><br>idle_session_timeout=600<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 数据连接的超时时间</span><br>data_connection_timeout=120<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 指定一个安全用户账号,让FTP服务器用作完全隔离和没有特权的独立用户。一般不启用</span><br>nopriv_user=ftpsecure<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 是否允许运行特殊的ftp命令<span class="hljs-string">&quot;async ABOR&quot;</span>，一般不启用</span><br>async_abor_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以ascii形式传输，一般不启用</span><br>ascii_upload_enable=YES<br>ascii_download_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 登录ftp的欢迎信息</span><br>ftpd_banner=Welcome to blah FTP service.<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 是否要禁止匿名用户使用某些邮件地址,如果是输入禁止的邮件地址的路径和文件名，可防Dos攻击</span><br>deny_email_enable=YES<br>banned_email_file=/etc/vsftpd/banned_emails<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 当这个文件中的用户登录时，把其用户的目录锁定，不能随意切换，对保证系统的安全重要。</span><br>chroot_list_enable=YES<br>chroot_list_file=/etc/vsftpd/chroot_list<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 把所有登录的用户都锁进自己的家目录，不能随意切换</span><br>chroot_local_user=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 当用户查看ftp服务器上目录文件时，支持递归显示</span><br>ls_recurse_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以独立守护进程工作</span><br>listen=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 是否启用ipv6地址上监听</span><br>listen_ipv6=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 定义以pam实现ftp用户认证，根据/etc/pam.d/vsftpd定义进行认证</span><br>pam_service_name=vsftpd<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 是否启用用户列表，并且只允许/etc/vsftpd/user_list文件中的用户登录</span><br>userlist_enable=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启用用户列表，禁止此列表/etc/vsftpd/usr_list中定义的用户登录</span><br>userlist_deny=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 是否启用tcp_wrapper对vsftpd的控制</span><br>tcp_wrappers=YES<br></code></pre></td></tr></table></figure>

<h3 id="FTP用户"><a href="#FTP用户" class="headerlink" title="FTP用户"></a>FTP用户</h3><p>vsftpd使用用户作为管理单位，想要访问某个ftp共享文件，必须使用特定的用户身份登录，我们可以配置一下几种类型的用户：</p>
<ul>
<li>正常用户（系统用户）</li>
<li>匿名用户（anonymous）</li>
<li>虚拟用户(ftp-only)</li>
</ul>
<p>默认情况下，vsftpd在安装的时候会创建一个ftp用户，这个用户就是作为匿名用户使用，ftp用户默认的家目录指向的是/var/ftp。任何没有访问限制的问价都可以通过匿名用户共享。</p>
<p>每一个系统中的用户都可以通过ftp方式访问自己的家目录。</p>
<p>匿名用户共享</p>
<p>vsftpd安装好之后可以直接启动使用，不需要进行任何配置，默认的情况下匿名用户可以登录使用，普通系统中的用户可以通过ftp方式访问自己的家目录。</p>
<h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p><strong>lftp</strong></p>
<p>我们可以通过lftp命令作为ftp客户端使用，通过以下命令安装lftp</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install –y lftp<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> lftp默认使用匿名用户登录：</span><br>lftp 192.168.0.133<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 可以指定登录用户：</span><br>lftp –u test 192.168.0.133<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> FTP基本命令</span><br><span class="hljs-meta">#</span><span class="bash"> 使用get命令可以从ftp服务器上下载文件</span><br>lftp 192.168.0.100<br><br>cd pu<br>get demo.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用put命令可以将一个文件上传到ftp服务器上：</span><br>lftp –u test 192.168.0.133<br>cd DownLoad<br>put demo.txt<br><span class="hljs-meta">#</span><span class="bash"> 注意：只有登录的用户对某个文件夹具有写的权限，就可以进行上传操作。</span><br></code></pre></td></tr></table></figure>
<h3 id="匿名用户上传"><a href="#匿名用户上传" class="headerlink" title="匿名用户上传"></a>匿名用户上传</h3><p>默认情况vsftpd只允许匿名用户访问，但是不允许使用匿名用户上传文件，我们可以通过以下方式配置匿名用户上传：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 修改vsftpd.conf</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 开启匿名用户（默认）</span><br>anonymous_enable=YES        <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 打开你匿名用户上传功能</span><br>anon_upload_enable=YES      <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 打开匿名用户创建文件夹功能</span><br>anon_mkdir_write_enable=YES <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 赋予匿名用户上传使用的文件夹以写的权限：</span>  <br>chmod 777 /var/ftp/pub<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 注意：不可以将匿名用户家目录设置为777权限，只能设置子目录，否则vsftpd将禁止访问匿名用户的家目录。</span><br><span class="hljs-meta">#</span><span class="bash"> 拓展：类似DropBox的创建-&gt;（权限可以设置为2733）</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>samba服务简介</title>
    <url>/2023/02/16/samba%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="SMB简介"><a href="#SMB简介" class="headerlink" title="SMB简介"></a>SMB简介</h2><blockquote>
<p>SMB（Serevr Message Block）协议是windows中使用的文件共享协议，我们在Linux系统或者其他类Unix系统中（BSD、MAC、Unix）可以通过samba服务来实现SMB功能。SMB协议又称为CIFS（Common Internet File System）协议。</p>
</blockquote>
<p><img src="smb.png" alt="smb"></p>
<p>Samba是著名的开源软件项目，在Linux/UNIX系统中实现了SMB网络协议，因此使得跨平台的文件共享变得更加容易。在部署Windows、Linux/UNIX混合平台的企业环境时，使用Smaba可以很好地解决不同系统之间的文件互访问题。</p>
<h3 id="samba主要功能"><a href="#samba主要功能" class="headerlink" title="samba主要功能"></a>samba主要功能</h3><p>samba服务是SMB的一个开源实现，主要功能如下：</p>
<ul>
<li>通过SMB协议进行文件共享</li>
<li>通过SMB协议进行打印共享</li>
<li>加入一个windows2000/2003/2008域环境</li>
<li>通过windows域环境进行认证操作</li>
</ul>
<h3 id="samba安装"><a href="#samba安装" class="headerlink" title="samba安装"></a>samba安装</h3><p>samba的软件包组成:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">samba-3.0.23c-2.i386.rpm<br>samba-client-3.0.23c-2.i386.rpm<br>samba-common-3.0.23c-2.i386.rpm<br>samba-swat-3.0.23c-2.i386.rpm<br>system-config-samba-1.2.39-1.el5.noarch.rpm<br><span class="hljs-meta">#</span><span class="bash">查看当前系统是否已经安装了samba</span><br>rpm –qa | grep samba<br><span class="hljs-meta">#</span><span class="bash">如果没有安装，我们执行以下命令，安装samba</span><br>yum install –y samba<br></code></pre></td></tr></table></figure>
<p>samba拥有3个相关服务，分别是：</p>
<ul>
<li>smbd<br>  提供文件及打印共享功能，使用139，445端口</li>
<li>nmbd<br>  提供NetBIOS名称解析，使用137端口（现在已经逐渐淘汰掉，使用DNS）</li>
<li>winbendd<br>  提供对windows 2000\2003\2008的用户及组信息的解析功能</li>
</ul>
<p><strong>一般作为文件共享使用samba，则只需要smbd服务</strong></p>
<h3 id="访问samba服务器"><a href="#访问samba服务器" class="headerlink" title="访问samba服务器"></a>访问samba服务器</h3><p>客户端访问samba服务器:</p>
<ul>
<li>Windows客户端直接使用以下方式连接即可：<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">\\192.168.0.100\skynet<br></code></pre></td></tr></table></figure></li>
<li>Linux或类Unix系统图形界面使用以下方式连接:<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">smb://192.168.0.100/skynet<br></code></pre></td></tr></table></figure></li>
<li>Linux使用CLI下可以使用smbclient命令链接：<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">注：smbclient默认是不安装的，需要单独安装</span><br>smbclient//192.168.0.100/skynet –U test<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">也可以通过mount命令挂载smb共享：</span><br>mount -o username=test //192.168.0.100/bxy-share /mnt/test/<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="samba配置"><a href="#samba配置" class="headerlink" title="samba配置"></a>samba配置</h3><p><strong>samba服务</strong><br>samba服务的主配置文件为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/etc/samba/smb.conf<br></code></pre></td></tr></table></figure>


<p>samba服务可以作为独立的服务器，也可以加入windows域环境使用。</p>
<p><strong>samba作为独立服务器使用时，samba使用Linux用户作为其用户，但是单独需<br>要创建密码。</strong></p>
<p>当加入windows域环境使用时，一般使用的是windows域用户。</p>
<p>samba有两种安全模式：</p>
<ul>
<li>User-Level 默认安全模式，使用用户名、密码进行认证。</li>
<li>Share-Level 只需要密码即可访问共享，但与部分windows客户端有兼容性问题，不推荐使用。（官方文档，但在实际的使用没有遇到此类问题）</li>
</ul>
<p>samba服务的主配置文件为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/etc/samba/smb.conf<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">配置文件分为三个部分：</span><br>[global]        #定义全局性配置<br>[homes]         #定义用户家目录的共享配置<br>[printers]      #定义打印机共享配置<br></code></pre></td></tr></table></figure>

<h3 id="Global配置"><a href="#Global配置" class="headerlink" title="Global配置"></a>Global配置</h3><p>samba常用的global配置如下：</p>
<p>配置工作组信息：</p>
<p>例如： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">设置当前的工作信息</span><br>workgroup=bxy     <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">服务器的简介</span><br>server string=this is bxy samba server    <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">配置安全模式</span><br>Security = user（默认是user）<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置服务器的安全级别，可设为以下4个值中的一个：</span><br>share    #可匿名访问<br>user     #需由本服务器验证用户名及密码<br>server   #由另一台服务器验证用户名及密码<br>domain   #由Windows域控制器验证用户名及密码<br>ads      #域环境<br></code></pre></td></tr></table></figure>

<h3 id="用户家目录共享"><a href="#用户家目录共享" class="headerlink" title="用户家目录共享"></a>用户家目录共享</h3><p>Samba服务配置文件默认配置好了用户家目录共享，每一个Linux用户的家目录</p>
<p>均可以使用smb协议访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[home]<br>Comment=Home Directories<br>Broseable=no<br>Writable=yes<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">为要通过smb协议访问家目录的用户创建samba密码：</span><br>smbpasswd -a 123456<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">启动smaba服务</span><br>Service smb start<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">通过smbclient登录验证用户共享</span><br>smbclient //your IP/skynet –U bxy<br></code></pre></td></tr></table></figure>

<h3 id="创建独立共享"><a href="#创建独立共享" class="headerlink" title="创建独立共享"></a>创建独立共享</h3><p>我们可以通过向/etc/samba/smb.conf 添加如下的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[skynet-share]<br><span class="hljs-meta">#</span><span class="bash">共享注释信息</span><br>comment = This is a share directory. <br>path = /bxy-share<br>public = no <br>valid users = test<br>browsable=yes<br>writable = yes<br>create mask = 0755<br>directory mask = 0755<br></code></pre></td></tr></table></figure>

<h3 id="创建匿名共享"><a href="#创建匿名共享" class="headerlink" title="创建匿名共享"></a>创建匿名共享</h3><p>如果我们需要创建一个不需要用户名密码就可以访问的开放共享，可以使用如下配置：</p>
<p><strong>修改samba的安全级别为share</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><br>[global]<br>secuity=share<br>[bxy-share]<br>comment = This is a share directory. –共享注释信息<br>path = /bxy-share<br>read only=yes<br>guest only=yes<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">注意：使用share安全级别可能会与windows客户端不兼容，如果在非常严格的生产环境中，还是需要注意，避免使用。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">其他：</span><br><span class="hljs-meta">#</span><span class="bash">可以使用testparm命令检查samba配置文件语法是否正确</span><br>testparm<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">我们可以通过smbclient查看一个指定服务器都有哪些共享:</span><br>smbclient –L 192.168.0.102<br>smbclient –L 192.168.0.102 –U test<br></code></pre></td></tr></table></figure>

<p>练习：挂载一个windows共享的文件夹？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mount -o username=Administrator,password=123456 //192.168.0.200/win-share /mnt/test/<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>yaml文件处理-Python篇</title>
    <url>/2023/09/24/yaml%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86-Python%E7%AF%87/</url>
    <content><![CDATA[<blockquote>
<p>在自动化测试数据存储中，比较常见的有csv、json、excel文件等，另外一个非常简单、好用的，而且更简洁的文件，那就是咱们今天的主角yaml文件。</p>
</blockquote>
<p><img src="yaml.png" alt="yaml"></p>
<h3 id="yaml文件遵循规则"><a href="#yaml文件遵循规则" class="headerlink" title="yaml文件遵循规则"></a>yaml文件遵循规则</h3><ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用Tab键，只允许使用空格</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
<li>使用#进行注释，从这个字符一直到行尾，都会被解析器忽略</li>
</ul>
<h3 id="pip安装Yaml"><a href="#pip安装Yaml" class="headerlink" title="pip安装Yaml"></a>pip安装Yaml</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip install pyyaml<br><span class="hljs-meta">#</span><span class="bash"> ruamel.yaml是pyyaml的衍生版，可以支持YAML类型文件最新版本</span><br>pip install ruamel.yaml<br></code></pre></td></tr></table></figure>

<h3 id="Code-Demo"><a href="#Code-Demo" class="headerlink" title="Code Demo"></a>Code Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># test.yaml 文件在当前的文件的子目录 static 下</span><br><span class="hljs-comment"># 获取当前脚本所在文件夹路径</span><br>curPath = os.path.dirname(os.path.realpath(__file__))<br><span class="hljs-comment"># 获取yaml文件路径</span><br>yamlFile = os.path.join(curPath, <span class="hljs-string">&quot;static/test.yaml&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_dict</span>():</span><br>	<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">	读取数据</span><br><span class="hljs-string">	&#x27;&#x27;&#x27;</span><br>	<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(yamlFile, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>	    d = yaml.load(f.read(), Loader=yaml.FullLoader)<br>	<span class="hljs-keyword">return</span> d<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">repair_data</span>(<span class="hljs-params">key, data</span>):</span><br>	<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">	更新、追加操作</span><br><span class="hljs-string">	&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(yamlFile, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        dict_temp = yaml.load(f, Loader=yaml.FullLoader)<br>        <span class="hljs-keyword">try</span>:<br>            dict_temp[key] = data<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> dict_temp:<br>                dict_temp = &#123;&#125;<br>            dict_temp.update(&#123;key:data&#125;)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(yamlFile, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        yaml.dump(dict_temp, f, allow_unicode=<span class="hljs-literal">True</span>) <span class="hljs-comment"># allow_unicode=True，解决存储时unicode编码问题。</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    repair_data(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&quot;value&quot;</span>)<br>    <span class="hljs-built_in">print</span>(get_dict())<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>性能测试笔记</title>
    <url>/2021/10/04/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>性能测试：</p>
<ul>
<li>所谓性能测试其实就是效率的测试。</li>
</ul>
<p>目前市场主流的性能测试工具：</p>
<ul>
<li>Jemter</li>
<li>Loadrunner</li>
<li>Locust</li>
<li>gatling</li>
</ul>
<p>所有的性能测试工具只是为了实现性能测试的一种手段和辅助的作用。</p>
<p>实质上的性能测试是在系统效率上的测试，我们需要关注的是系统整体运行的效率，是否存在有影响效率的性能问题。</p>
<p>对于单个核心接口进行性能测试，考虑它的并发最大能达到多少，是否满足性能指标。</p>
<p>性能测试的流程：（和测试工具相关的步骤2~3）</p>
<ul>
<li><p>需求分析，分析系统的性能指标。</p>
</li>
<li><p>准备环境，包含工具、场景等一系列性能测试相关需求</p>
</li>
<li><p>准备脚本，基于不同的性能场景完成测试准备。</p>
</li>
<li><p>执行脚本，获取数据。</p>
</li>
<li><p>判定指标是否满足要求。</p>
<ul>
<li>如果达标，还会继续进行进一步的性能测试。（测试系统的阈值、测试系统是否具有抗风险的能力，系统是否具有自动扩容的能力）</li>
<li>如果不达标，进入到性能诊断</li>
</ul>
</li>
<li><p>性能诊断</p>
</li>
<li><p>提供优化建议</p>
</li>
</ul>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>PT</tag>
      </tags>
  </entry>
  <entry>
    <title>查看APK所需权限命令</title>
    <url>/2020/02/19/%E6%9F%A5%E7%9C%8BAPK%E6%89%80%E9%9C%80%E6%9D%83%E9%99%90%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>在Android平台下测试app的安全性，经常会碰到查看当前apk所需权限的问题，一般遇到问题，采用两种方式:</p>
<ul>
<li>使用第三方软件管理软件，安装部署apk到Android平台，使用第三方软件查看</li>
<li>使用aapt命令直接查看，例如：我们需要查看UC浏览器的权限<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">attp命令在Android SDK目录下的build-tools</span><br>aapt dump badging D:\Download\UCBrowser_V12.8.5.1065_android_pf145_(Build200216161452).apk<br><span class="hljs-meta">#</span><span class="bash">结果如下</span><br>package: name=&#x27;com.UCMobile&#x27; versionCode=&#x27;1065&#x27; versionName=&#x27;12.8.5.1065&#x27; compileSdkVersion=&#x27;28&#x27; compileSdkVersionCodename=&#x27;9&#x27;<br>install-location:&#x27;auto&#x27;<br>sdkVersion:&#x27;16&#x27;<br>targetSdkVersion:&#x27;28&#x27;<br>uses-permission: name=&#x27;android.permission.ACCESS_COARSE_LOCATION&#x27;<br>uses-permission: name=&#x27;android.permission.ACCESS_FINE_LOCATION&#x27;<br>uses-permission: name=&#x27;android.permission.INTERNET&#x27;<br>uses-permission: name=&#x27;android.permission.ACCESS_NETWORK_STATE&#x27;<br>uses-permission: name=&#x27;android.permission.READ_PHONE_STATE&#x27;<br>uses-permission: name=&#x27;android.permission.CAMERA&#x27;<br>uses-permission: name=&#x27;android.permission.READ_EXTERNAL_STORAGE&#x27;<br>uses-permission: name=&#x27;android.permission.WRITE_EXTERNAL_STORAGE&#x27;<br>uses-permission: name=&#x27;android.permission.VIBRATE&#x27;<br>uses-permission: name=&#x27;android.permission.WAKE_LOCK&#x27;<br>uses-permission: name=&#x27;android.permission.ACCESS_WIFI_STATE&#x27;<br>uses-permission: name=&#x27;android.permission.CHANGE_WIFI_STATE&#x27;<br>uses-permission: name=&#x27;com.android.launcher.permission.INSTALL_SHORTCUT&#x27;<br>uses-permission: name=&#x27;com.android.launcher.permission.UNINSTALL_SHORTCUT&#x27;<br>uses-permission: name=&#x27;android.permission.RECORD_AUDIO&#x27;<br>uses-permission: name=&#x27;android.permission.GET_TASKS&#x27;<br>uses-permission: name=&#x27;android.permission.SYSTEM_ALERT_WINDOW&#x27;<br>uses-permission: name=&#x27;android.permission.SET_WALLPAPER&#x27;<br>uses-permission: name=&#x27;android.permission.EXPAND_STATUS_BAR&#x27;<br>uses-permission: name=&#x27;android.permission.CHANGE_NETWORK_STATE&#x27;<br>uses-permission: name=&#x27;com.android.launcher.permission.READ_SETTINGS&#x27;<br>uses-permission: name=&#x27;com.android.launcher.permission.WRITE_SETTINGS&#x27;<br>uses-permission: name=&#x27;com.android.launcher2.permission.READ_SETTINGS&#x27;<br>uses-permission: name=&#x27;com.android.launcher2.permission.WRITE_SETTINGS&#x27;<br>uses-permission: name=&#x27;com.android.launcher3.permission.READ_SETTINGS&#x27;<br>uses-permission: name=&#x27;com.android.launcher3.permission.WRITE_SETTINGS&#x27;<br>uses-permission: name=&#x27;com.oppo.launcher.permission.READ_SETTINGS&#x27;<br>uses-permission: name=&#x27;com.oppo.launcher.permission.WRITE_SETTINGS&#x27;<br>uses-permission: name=&#x27;com.huawei.launcher3.permission.READ_SETTINGS&#x27;<br>uses-permission: name=&#x27;com.huawei.launcher3.permission.WRITE_SETTINGS<br></code></pre></td></tr></table></figure>
通过回显可以分析该APK所需权限是否与需求文档一致。</li>
</ul>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>物理班</title>
    <url>/2019/11/26/%E7%89%A9%E7%90%86%E7%8F%AD/</url>
    <content><![CDATA[<p>物理班<br>[作者：刘嘉俊]<br>也许是一时的冲动，我进了物理班．<br>然后，我的大脑开始向一种科学方法进化，物理逐渐成为一种条件反射。在乘车时，我会不由自主地对我的身体进行受力分析，特别在转弯时，很多计算向心力的公式一下子充塞了我的大脑。在看足球的时候，会自觉地通过平抛运动的计算方法结合相对运动去判断球传得是否准确。至于语文课，根本就是用来补充晚上的睡眠不足。<br>这种痛苦的变化大概在开学后的两个月内完成，其间，我的学生手册上增加了不少不光彩的纪录，甚至我和同桌的分数相加才能和最高分打成平手，这是我从未想到过的。母亲对我的教育也让我很难忘，以前，她总说要好好读书不然就去扫大街，现在她却说不好好读书就等着下岗吧，看来环卫局同样要求学历了。不过对于哪种洋参丸效果最好，我是很了解的，这是母亲舍得智力投资的结果。<br>然后，我能说我充分适应了高三的学习环境，然后我发觉班里成员的改变”让我欢喜让我忧”。那么多的新面孔足以让我后悔当初班级沙文主义让我少认识不少应该早认识的人，那么多的新朋友或勉强成为朋友的人让我的通讯录丰富了不少。物理班，男女生的比例大约是2.46:1，女生资源的匮乏让整个教室不是太吵闹就是太沉闷，而男生资源的过剩又让我体会到了男生的贬值。<br>就在我的长吁短叹中，我认识了莹。说认识，其实早就认识了，就是同班同学嘛，不过却从来没有想到她是那样的有意思。开年级会的时候，因为实在找不到地方，她屈尊坐在我边上。说屈尊是因为我这种因为住的地方不太敏感从而没有什么市容监督所以一直很幸运地没被抓的人实在没有什么吸引她的地方。当年级组长在那里长篇大论到”我们这届学生水平总体还是不错”的时候，她轻轻地接上”我们一直在努力”;而说到”希望所有的同学都能达到分数线”的时候，她说”我们会做得更好”，都是广告词。我看看她，她耸耸肩，我认为物理班女生不太可爱的想法从此消失。<br>然后，有一次语文老师不知道出了什么问题在课堂上读了我的作文，说是写得很有新意。天知道那是我早上起来发现作文没写花了25分钟边吃早饭边涂的。下课后，莹跑来问我那里面”引用”的名言是哪里看到的，谁说的，很有道理。我说如果你觉得自己够出名的话，你说什么都能在前面加上”有位名人说过”，如果你觉得自己不够有名至少可以这样安慰自己。她笑了，我从来没见过那种明亮以至透明的笑容。<br>然后，我有了足够的证据证明万有引力的公式是错误的，因为虽然莹的质量不能与班主任相提并论，我却感到她的吸引力更大，至少我眼睛是那样感觉的。我很警惕这种危险的感觉，可在下决心阻止这种感觉之前的一秒钟我却想如果高三再不体验一下，这辈子就没有机会早恋了，那可亏大了。何况，以我对自己的评价，我也未必能抓住这次机会。<br>高三就是高三，只要你上了任何一节课，就不会再怀疑。虽然，你可以选择。对于上课，你可以选择认真听或抓紧时间做习题;对于作业，你可以选择做或不做，或者抄，然而老师也可以选择放弃你，找你去办公室，点名批评或者通知家长。我总是很认真地做作业，发扬雷锋精神，把有限的时间投入到无限的题海战术中去，虽然效果相当有限，但成绩单上让人眼睛一亮的分数却不再出现了。在这方面，莹与我有相当的共同语言。她可能比我稍微好一些，却比我更不在乎。有时候，她会拿着一些题目来问我，不是因为我厉害，而是因为我很耐心，耐心到用笨拙的办法艰难地完成，可能还有别的原因。而我，似乎很愿意被打扰，甚至期盼她的打扰。</p>
<p>测验在一次次地进行，我的信心在一点点地消失。并不是我成绩不行，只是我觉得我像一台旧机器，每天吞吐着数量可怕的习题，所有的感觉就在这最强烈的感觉的阴影下渐渐麻木。绝大部分同学都是这样，教室里的生息真是气若游丝。<br>这时候，莹就更加引人注目。在回答老师问题的时候，她的声音总是潇洒而自信，虽然不常正确。对了，她会在老师转身的一刹那，竖起代表胜利的两根手指;错了，她会掩着嘴，作出无心之失的样子，老师也不会苛责。她是同学中最有人缘的，像她这样的人，这似乎很正常。<br>但是，我不知道她为什么有那么好的心情。<br>每天一放学，我就会以最快的速度塞好书包，冲出教室，骑上车回家，然后做作业复习。我一直认为学校里不适合思考问题，我宁可一个人。很多人喜欢在学校里做完作业再回家，他们总是相信互帮互助的效果，可我知道波的干涉除了能相互加强外也能够相互减弱。<br>然而，当我知道莹每天做完作业回家而且她家到我家的位移相当有限之后，我也开始每天留下，不知道是为什么。只有很少的几天，我和她同路，和她聊天，但是，聊天的主题不是将来的前途就是学习考试，很少例外。不过有一天，聊到流行音乐，这是我们能享受的不多的娱乐项目了。她问我喜不喜欢梁咏琪的歌，我说听过但那首《自由落体》里既没有加速度又没有高度或者末速度因此不知道是不是她和我同一个星球。她笑了，很透明的笑容。</p>
<p>期中考试用了两天时间，那是相对轻松的两天，尽管我知道那以后是可怕的。<br>发布成绩的那天，果然。<br>吃午饭的时候，我看见莹趴在课桌上。10分钟后我回到教室，她还是这样。教室里只有我们两个人，我过去问她。她眼睛红着，说她考得不好，我说我考糊了，所以我们彼此彼此。我不知道怎么安慰她，从来没有知道过。我只能辞不达意地说了些无关痛痒的话，还好她很领情地心情变好了，而她终于没吃午饭。</p>
<p>秋游就是两天以后。<br>可能是学校知道让这些深受迫害的考得好要庆祝考的差要发泄的学生在学校里发挥能量会给年纪比巴金还大的大楼造成毁灭性破坏所以就法外施恩让我们出去疯。<br>我们事先说好要是谁敢带课本去就让他头顶着书游街加上做“喷气式飞机”加上“砸烂他的狗头”，没有人不知趣。<br>然而，不是没有事故。<br>不知是哥们把我弄丢了还是我把他们弄丢了，反正我从WC出来就再也没有找到他们。但我在四处乱转的时候却碰到了莹，她说她把她们弄丢了。她还说既然你也是一个人那就跟着我，我不会亏待你的。说的跟真的一样，我这样做了。<br>然后我给她拍了一胶卷个人写真，用我的Nikon，也有了我和她的合影。<br>集合的时候我终于再次见到弄丢我的哥们和她弄丢的她们，我不知道如何解释如何会和莹在一起。莹很从容地说她拣到了一个装备精良技术精湛的她的个人免费摄影师。<br>从那一天以后，我不是撞机会和莹同路，而是每天。</p>
<p>我问她，为什么她的心情总是比我好。<br>她说，比我心情好是应该的，看我哭丧着脸好象世界末日一样。在高三更要懂得放松自己的心情，用好的心情全力备战。<br>我问她，将来想干什么。她说要做吟游诗人，重新创立这个浪漫的职业，周游世界。<br>我只想当个摄影记者，罗伯特。卡帕那样的。她说她不想看我拍的最后一张照片。</p>
<p>我们用”不要和化学班讨论动量守恒”代替”对牛弹琴”，据说在历史班的版本是“不要和研究两个球怎么撞的人说农民起义”。“不要推我”成了“不要对我做功”，“小心我把你扔出去”成了“小心我让你做平抛运动”……每个班都有些能把学科特点联系到任何东西上的高手，物理班是莹。</p>
<p>在我们结束解析几何部分的第二天，老师说学校有个捐助失学儿童的倡议。我对莹说，要是那些可怜的孩子知道高三是什么样，他们宁可失学。莹笑着，认真而夸张地点了点头。<br>我知道有很多同学去弹子房真实地演示动量守恒，我不敢，只能呆在家里做考卷，突然发现家里考卷多的让我懊丧。学期过去了68%，考卷总重量是11。35公斤，如果在赤道由于离地心较远会轻一点。我带文件夹上学，因为我同时发现每天只要带老师上课要讲的考卷就可以了。却被老师训了一顿，说学生要有学生的样子。我不知道满的文件夹和空的书包里的东西有何不同，但我知道高三老师很在乎我们一举一动而且不花时间解释道理。<br>为了迎接3+1考试的复习很早就开始了，整整一个月。我们很小规模地庆祝了一下圣诞节就投入到热火朝天的复习中去了。老师忘了下课铃是干什么的，我可以理解;老师布置作业时忘了我们还要睡觉，我可以理解;老师对体育课后满头大汗的男生大发雷霆，我可以理解……我发现我对老师体谅起来，因为我不够体谅自己。<br>那次题为《话说考试》的作文被称为有史以来平均水平最高的作文，老师说我们有真情实感。我想到一句诗—-“国家不幸诗家幸，赋到沧桑句便工。”稍微改一下就很能形容这种情况。<br>在这样的环境里，莹还是经常和我在一起。不过，开始经常较量测验的成绩，经常一起复习。不同的局势，我们有不同方式的交流。因为我们成绩都在上升，老师没有干涉。<br>显然，莹没有以前那么开朗了。很少， 我能看到她那明亮而透明的笑容了。虽然她的苦笑仍比任何人都甜蜜，我知道她心里有了高三的烙印。<br>她解题时经常用手比划出函数图像或者左手定则和右手定则，动作舒展而优美。我总是在心里默想。她兴奋或者生气的时候会拿书来砸我。在这样的局势里，我不会生气了，也兴奋不起来。<br>这样，一直到3+1考试结束。</p>
<p>寒假，只有有限的几天，如果除去春节不得不到处转悠的几天，和做寒假作业需要的时间。我和莹用了一天出去。这是我们第一次有预谋的”约会”。<br>在那个时候考试的成绩还不知道，感觉总是有的。成绩都写在我们脸上。相互看了一眼然后相视一笑。<br>莹的心情总是清楚地写在她的一举一动中:她并不愉快。<br>我或者她，从来没有直接对对方有过什么直接的表示。这天，她褪下她手腕上的许愿砂，送给我;我，给她我脖子上的子弹坠。<br>在必胜客，我们享用我们的午餐。看着心形的心意匹萨放在面前，视觉效果非常好。<br>她说下个学期惨了，必须非常拚命，不然只能读高四了。<br>我说我也一样，差不多只能破釜沉舟了。<br>她说，我们分兵突进，各自为战，在大学会合。<br>我手中的餐刀自由落体。我看她，她是不得已的。我想我能理解。<br>我说，虽然路程不同，位移是一样的，可以。<br>餐厅的背景音乐是《笨鸟先飞》，然后我注意到我面前的那块匹萨，被我消灭了很大的一块。我知道，能在大学会合，已经不是加不加油的问题，而是加不加核燃料的问题。<br>下午，我们去看了日本电影《情书》，这是一个和物理无关的一天的最后议程。</p>
<p>我知道，现在是高三，我们在物理班。<br>事实就是这么简单。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title>社戏</title>
    <url>/2025/01/17/%E7%A4%BE%E6%88%8F/</url>
    <content><![CDATA[<p><img src="sx1.jpg" alt="社戏"></p>
<p>我在倒数上去的二十年中，只看过两回中国戏，前十年是绝不看，因为没有看戏的意思和机会，那两回全在后十年，然而都没有看出什么来就走了。</p>
<p>第一回是民国元年我初到北京的时候，当时一个朋友对我说，北京戏最好，你不去见见世面么？我想，看戏是有味的，而况在北京呢。于是都兴致勃勃地跑到什么园，戏文已经开场了，在外面也早听到冬冬地响。我们挨进门，几个红的绿的在我的眼前一闪烁，便又看见戏台下满是许多头，再定神四面看，却见中间也还有几个空座，挤过去要坐时，又有人对我发议论，我因为耳朵已经喤喤的响着了，用了心，才听到他是说“有人，不行！”</p>
<p>我们退到后面，一个辫子很光的却来领我们到了侧面，指出一个地位来。这所谓地位者，原来是一条长凳，然而他那坐板比我的上腿要狭到四分之三，他的脚比我的下腿要长过三分之二。我先是没有爬上去的勇气，接着便联想到私刑拷打的刑具，不由的毛骨悚然地走出了。</p>
<p>走了许多路，忽听得我的朋友的声音道，“究竟怎的？”我回过脸去，原来他也被我带出来了。他很诧异地说，“怎么总是走，不答应？”我说，“朋友，对不起，我耳朵只在冬冬喤喤的响，并没有听到你的话。”</p>
<p>后来我每一想到，便很以为奇怪，似乎这戏太不好，——否则便是我近来在戏台下不适于生存了。</p>
<p>第二回忘记了那一年，总之是募集湖北水灾捐而谭叫天（注：即京剧名角谭鑫培）还没有死。捐法是两元钱买一张戏票，可以到第一舞台去看戏，扮演的多是名角，其一就是小叫天。我买了一张票，本是对于劝募人聊以塞责的，然而似乎又有好事家乘机对我说了些叫天不可不看的大法要了。我于是忘了前几年的冬冬喤喤之灾，竟到第一舞台去了，但大约一半也因为重价购来的宝票，总得使用了才舒服。我打听得叫天出台是迟的，而第一舞台却是新式构造，用不着争座位，便放了心，延宕到九点钟才去，谁料照例，人都满了，连立足也难，我只得挤在远处的人丛中看一个老旦在台上唱。那老旦嘴边插着两个点火的纸捻子，旁边有一个鬼卒，我费尽思量，才疑心他或者是目连的母亲，因为后来又出来了一个和尚。然而我又不知道那名角是谁，就去问挤小在我的左边的一位胖绅士。他很看不起似的斜瞥了我一眼，说道，“龚云甫！”我深愧浅陋而且粗疏，脸上一热，同时脑里也制出了决不再问的定章，于是看小旦唱，看花旦唱，看老生唱，看不知什么角色唱，看一大班人乱打，看两三个人互打，从九点多到十点，从十点到十一点，从十一点到十一点半，从十一点半到十二点，——然而叫天竟还没有来。</p>
<p>我向来没有这样忍耐的等待过什么事物，而况这身边的胖绅士的吁吁的喘气，这台上的冬冬喤喤的敲打，红红绿绿的晃荡，加之以十二点，忽而使我醒悟到在这里不适于生存了。我同时便机械的拧转身子，用力往外只一挤，觉得背后便已满满的，大约那弹性的胖绅士早在我的空处胖开了他的右半身了。我后无回路，自然挤而又挤，终于出了大门。街上除了专等看客的车辆之外，几乎没有什么行人了，大门口却还有十几个人昂着头看戏目，别有一堆人站着并不看什么，我想：他们大概是看散戏之后出来的女人们的，而叫天却还没有来……</p>
<p>然而夜气很清爽，真所谓“沁人心脾”，我在北京遇着这样的好空气，仿佛这是第一遭了。</p>
<p>这一夜，就是我对于中国戏告了别的一夜，此后再没有想到他，即使偶尔经过戏园，我们也漠不相关，精神上早已一在天之南一在地之北了。</p>
<p>但是前几天，我忽在无意之中看到一本日本文的书，可惜忘记了书名和著者，总之是关于中国戏的。其中有一篇，大意仿佛说，中国戏是大敲，大叫，大跳，使看客头昏脑眩，很不适于剧场，但若在野外散漫的所在，远远的看起来，也自有他的风致。我当时觉着这正是说了在我意中而未曾想到的话，因为我确记得在野外看过很好的戏，到北京以后的连进两回戏园去，也许还是受了那时的影响哩。可惜我不知道怎么一来，竟将书名忘却了。</p>
<p>至于我看好戏的时候，却实在已经是“远哉遥遥”的了，其时恐怕我还不过十一二岁。</p>
<p>我们鲁镇的习惯，本来是凡有出嫁的女儿，倘自己还未当家，夏间便大抵回到母家去消夏。那时我的祖母虽然还康健，但母亲也已分担了些家务，所以夏期便不能多日的归省了，只得在扫墓完毕之后，抽空去住几天，这时我便每年跟了我的母亲住在外祖母的家里。那地方叫平桥村，是一个离海边不远，极偏僻的，临河的小村庄；住户不满三十家，都种田，打鱼，只有一家很小的杂货店。但在我是乐土：因为我在这里不但得到优待，又可以免念“秩秩斯干幽幽南山”了。</p>
<p>和我一同玩的是许多小朋友，因为有了远客，他们也都从父母那里得了减少工作的许可，伴我来游戏。在小村里，一家的客，几乎也就是公共的。我们年纪都相仿，但论起行辈来，却至少是叔子，有几个还是太公，因为他们合村都同姓，是本家。然而我们是朋友，即使偶尔吵闹起来，打了太公，一村的老老少少，也决没有一个会想出“犯上”这两个字来，而他们也百分之九十九不识字。</p>
<p>我们每天的事情大概是掘蚯蚓，掘来穿在铜丝做的小钩上，伏在河沿上去钓虾。虾是水世界里的呆子，决不惮用了自己的两个钳捧着钩尖送到嘴里去的，所以不半天便可以钓到一大碗。这虾照例是归我吃的。其次便是一同去放牛，但或者因为高等动物了的缘故罢，黄牛水牛都欺生，敢于欺侮我，因此我也总不敢走近身，只好远远地跟着，站着。这时候，小朋友们便不再原谅我会读“秩秩斯干”，却全都嘲笑起来了。</p>
<p>至于我在那里所第一盼望的，却在到赵庄去看戏。赵庄是离平桥村五里的较大的村庄；平桥村太小，自己演不起戏，每年总付给赵庄多少钱，算作合做的。当时我并不想到他们为什么年年要演戏。现在想，那或者是春赛，是社戏了。</p>
<p>就在我十一二岁时候的这一年，这日期也看看等到了。不料这一年真可惜，在早上就叫不到船。平桥村只有一只早出晚归的航船是大船，决没有留用的道理。其余的都是小船，不合用；央人到邻村去问，也没有，早都给别人定下了。外祖母很气恼，怪家里的人不早定，絮叨起来。母亲便宽慰伊，说我们鲁镇的戏比小村里的好得多，一年看几回，今天就算了。只有我急得要哭，母亲却竭力的嘱咐我，说万不能装模装样，怕又招外祖母生气，又不准和别人一同去，说是怕外祖母要担心。</p>
<p>总之，是完了。到下午，我的朋友都去了，戏已经开场了，我似乎听到锣鼓的声音，而且知道他们在戏台下买豆浆喝。</p>
<p>这一天我不钓虾，东西也少吃。母亲很为难，没有法子想。到晚饭时候，外祖母也终于觉察了，并且说我应当不高兴，他们太怠慢，是待客的礼数里从来没有的。吃饭之后，看过戏的少年们也都聚拢来了，高高兴兴的来讲戏。只有我不开口；他们都叹息而且表同情。忽然间，一个最聪明的双喜大悟似的提议了，他说，“大船？八叔的航船不是回来了么？”十几个别的少年也大悟，立刻撺掇起来，说可以坐了这航船和我一同去。我高兴了。然而外祖母又怕都是孩子，不可靠；母亲又说是若叫大人一同去，他们白天全有工作，要他熬夜，是不合情理的。在这迟疑之中，双喜可又看出底细来了，便又大声的说道，“我写包票！船又大；迅哥儿向来不乱跑；我们又都是识水性的！”</p>
<p>诚然！这十多个少年，委实没有一个不会凫水的，而且两三个还是弄潮的好手。</p>
<p>外祖母和母亲也相信，便不再驳回，都微笑了。我们立刻一哄的出了门。</p>
<p>我的很重的心忽而轻松了，身体也似乎舒展到说不出的大。一出门，便望见月下的平桥内泊着一只白篷的航船，大家跳下船，双喜拔前篙，阿发拔后篙，年幼的都陪我坐在舱中，较大的聚在船尾。母亲送出来吩咐“要小心”的时候，我们已经点开船，在桥石上一磕，退后几尺，即又上前出了桥。于是架起两支橹，一支两人，一里一换，有说笑的，有嚷的，夹着潺潺的船头激水的声音，在左右都是碧绿的豆麦田地的河流中，飞一般径向赵庄前进了。</p>
<p>两岸的豆麦和河底的水草所发散出来的清香，夹杂在水气中扑面的吹来；月色便朦胧在这水气里。淡黑的起伏的连山，仿佛是踊跃的铁的兽脊似的，都远远的向船尾跑去了，但我却还以为船慢。他们换了四回手，渐望见依稀的赵庄，而且似乎听到歌吹了，还有几点火，料想便是戏台，但或者也许是渔火。</p>
<p>那声音大概是横笛，宛转，悠扬，使我的心也沉静，然而又自失起来，觉得要和他弥散在含着豆麦蕴藻之香的夜气里。</p>
<p>那火接近了，果然是渔火；我才记得先前望见的也不是赵庄。那是正对船头的一丛松柏林，我去年也曾经去游玩过，还看见破的石马倒在地下，一个石羊蹲在草里呢。过了那林，船便弯进了叉港，于是赵庄便真在眼前了。</p>
<p>最惹眼的是屹立在庄外临河的空地上的一座戏台，模糊在远处的月夜中，和空间几乎分不出界限，我疑心画上见过的仙境，就在这里出现了。这时船走得更快，不多时，在台上显出人物来，红红绿绿的动，近台的河里一望乌黑的是看戏的人家的船篷。</p>
<p>“近台没有什么空了，我们远远的看罢。”阿发说。</p>
<p>这时船慢了，不久就到，果然近不得台旁，大家只能下了篙，比那正对戏台的神棚还要远。其实我们这白篷的航船，本也不愿意和乌篷的船在一处，而况并没有空地呢……</p>
<p>在停船的匆忙中，看见台上有一个黑的长胡子的背上插着四张旗，捏着长枪，和一群赤膊的人正打仗。双喜说，那就是有名的铁头老生，能连翻八十四个筋斗，他日里亲自数过的。</p>
<p>我们便都挤在船头上看打仗，但那铁头老生却又并不翻筋斗，只有几个赤膊的人翻，翻了一阵，都进去了，接着走出一个小旦来，咿咿呀呀的唱。双喜说，“晚上看客少，铁头老生也懈了，谁肯显本领给白地看呢？”我相信这话对，因为其时台下已经不很有人，乡下人为了明天的工作，熬不得夜，早都睡觉去了，疏疏朗朗的站着的不过是几十个本村和邻村的闲汉。乌篷船里的那些土财主的家眷固然在，然而他们也不在乎看戏，多半是专到戏台下来吃糕饼、水果和瓜子的。所以简直可以算白地。</p>
<p>然而我的意思却也并不在乎看翻筋斗。我最愿意看的是一个人蒙了白布，两手在头上捧着一支棒似的蛇头的蛇精，其次是套了黄布衣跳老虎。但是等了许多时都不见，小旦虽然进去了，立刻又出来了一个很老的小生。我有些疲倦了，托桂生买豆浆去。他去了一刻，回来说：“没有。卖豆浆的聋子也回去了。日里倒有，我还喝了两碗呢。现在去舀一瓢水来给你喝罢。”</p>
<p>我不喝水，支撑着仍然看，也说不出见了些什么，只觉得戏子的脸都渐渐的有些稀奇了，那五官渐不明显，似乎融成一片的再没有什么高低。年纪小的几个多打呵欠了，大的也各管自己谈话。忽而一个红衫的小丑被绑在台柱子上，给一个花白胡子的用马鞭打起来了，大家才又振作精神的笑着看。在这一夜里，我以为这实在要算是最好的一折。</p>
<p>然而老旦终于出台了。老旦本来是我所最怕的东西，尤其是怕他坐下了唱。这时候，看见大家也都很扫兴，才知道他们的意见是和我一致的。那老旦当初还只是踱来踱去的唱，后来竟在中间的一把交椅上坐下了。我很担心；双喜他们却就破口喃喃的骂。我忍耐的等着，许多工夫，只见那老旦将手一抬，我以为就要站起来了，不料他却又慢慢的放下在原地方，仍旧唱。全船里几个人不住的吁气，其余的也打起哈欠来。双喜终于熬不住了，说道，怕他会唱到天明还不完，还是我们走的好罢。大家立刻都赞成，和开船时候一样踊跃，三四人径奔船尾，拔了篙，点退几丈，回转船头，驾起橹，骂着老旦，又向那松柏林前进了。</p>
<p>月还没有落，仿佛看戏也并不很久似的，而一离赵庄，月光又显得格外的皎洁。回望戏台在灯火光中，却又如初来未到时候一般，又漂渺得像一座仙山楼阁，满被红霞罩着了。吹到耳边来的又是横笛，很悠扬；我疑心老旦已经进去了，但也不好意思说再回去看。</p>
<p>不多久，松柏林早在船后了，船行也并不慢，但周围的黑暗只是浓，可知已经到了深夜。他们一面议论着戏子，或骂，或笑，一面加紧的摇船。这一次船头的激水声更其响亮了，那航船，就像一条大白鱼背着一群孩子在浪花里蹿，连夜渔的几个老渔父，也停了艇子看着喝采起来。</p>
<p>离平桥村还有一里模样，船行却慢了，摇船的都说很疲乏，因为太用力，而且许久没有东西吃。这回想出来的是桂生，说是罗汉豆正旺相，柴火又现成，我们可以偷一点来煮吃。大家都赞成，立刻近岸停了船；岸上的田里，乌油油的都是结实的罗汉豆。</p>
<p>“阿阿，阿发，这边是你家的，这边是老六一家的，我们偷那一边的呢？”双喜先跳下去了，在岸上说。</p>
<p>我们也都跳上岸。阿发一面跳，一面说道，“且慢，让我来看一看罢，”他于是往来的摸了一回，直起身来说道，“偷我们的罢，我们的大得多呢。”一声答应，大家便散开在阿发家的豆田里，各摘了一大捧，抛入船舱中。双喜以为再多偷，倘给阿发的娘知道是要哭骂的，于是各人便到六一公公的田里又各偷了一大捧。</p>
<p>我们中间几个年长的仍然慢慢的摇着船，几个到后舱去生火，年幼的和我都剥豆。不久豆熟了，便任凭航船浮在水面上，都围起来用手撮着吃。吃完豆，又开船，一面洗器具，豆荚豆壳全抛在河水里，什么痕迹也没有了。双喜所虑的是用了八公公船上的盐和柴，这老头子很细心，一定要知道，会骂的。然而大家议论之后，归结是不怕。他如果骂，我们便要他归还去年在岸边拾去的一枝枯桕树，而且当面叫他“八癞子”。</p>
<p>“都回来了！那里会错。我原说过写包票的！”双喜在船头上忽而大声的说。</p>
<p>我向船头一望，前面已经是平桥。桥脚上站着一个人，却是我的母亲，双喜便是对伊说着话。我走出前舱去，船也就进了平桥了，停了船，我们纷纷都上岸。母亲颇有些生气，说是过了三更了，怎么回来得这样迟，但也就高兴了，笑着邀大家去吃炒米。</p>
<p>大家都说已经吃了点心，又渴睡，不如及早睡的好，各自回去了。</p>
<p>第二天，我向午才起来，并没有听到什么关系八公公盐柴事件的纠葛，下午仍然去钓虾。</p>
<p>“双喜，你们这班小鬼，昨天偷了我的豆了罢？又不肯好好的摘，踏坏了不少。”我抬头看时，是六一公公棹着小船，卖了豆回来了，船肚里还有剩下的一堆豆。</p>
<p>“是的。我们请客。我们当初还不要你的呢。你看，你把我的虾吓跑了！”双喜说。</p>
<p>六一公公看见我，便停了楫，笑道，“请客？——这是应该的。”于是对我说，“迅哥儿，昨天的戏可好么？”</p>
<p>我点一点头，说道，“好。”</p>
<p>“豆可中吃呢？”</p>
<p>我又点一点头，说道，“很好。”</p>
<p>不料六一公公竟非常感激起来，将大拇指一翘，得意的说道，“这真是大市镇里出来的读过书的人才识货！我的豆种是粒粒挑选过的，乡下人不识好歹，还说我的豆比不上别人的呢。我今天也要送些给我们的姑奶奶尝尝去……”他于是打着楫子过去了。</p>
<p>待到母亲叫我回去吃晚饭的时候，桌上便有一大碗煮熟了的罗汉豆，就是六一公公送给母亲和我吃的。听说他还对母亲极口夸奖我，说“小小年纪便有见识，将来一定要中状元。姑奶奶，你的福气是可以写包票的了”。但我吃了豆，却并没有昨夜的豆那么好。</p>
<p>真的，一直到现在，我实在再没有吃到那夜似的好豆，——也不再看到那夜似的好戏了。</p>
<p>鲁迅</p>
<p>一九二二年十月</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title>秋菊男的故事</title>
    <url>/2019/11/23/%E7%A7%8B%E8%8F%8A%E7%94%B7%E7%9A%84%E6%95%85%E4%BA%8B/</url>
    <content><![CDATA[<blockquote>
<p>   罗永浩</p>
</blockquote>
<p>十四年前……这是一个真实的故事，十四年前，我在东北老家Y市的一个外语培训机构学过一段许国璋的英语。这是一个韩国人开的私立学校，名字很土，叫“三育”。学校的水准很糟糕，国内教师通常是本地大学或中学教师出来兼职的，外教大都是些口音诡异的菲律宾人和马来西亚人。经常能看到的场面是，一些学生在“外教口语班”开课后，纷纷赶到前台表示愤怒，工作人员则慈眉善目地解释说，菲律宾和马来西亚的官方语言确实是英语。有时候，他们还会笨拙地拿出一本脏乎乎的介绍菲律宾的旅游小册子，“咋还不信呢？自个儿看看吧。” </p>
<p>那时候我刚好失恋，又赶上一个阴冷的冬天，为了缓解负面情绪带来的压力，我恶学了二十来天英语，在那个初级班结课考试的时候，考了个班里的第一名。按照事先的约定，我去学校领取数额为几百元的奖金(我不记得具体数字了，好像是三百元)。一个正方形脸蛋的中年韩国校长告诉我说，这个奖金我们不能给你钱，只能从你学习中级班时的学费里减免，我说那叫“优惠”，或者是“打折”，不叫“奖金”，你们承诺的是给“奖金”。何况，我也没答应过你们我一定会继续学习你们的中级班。韩国校长说，我们就是为了让你们努力学习才设立这个奖学金的，不是为了让你们得到钱，你们拿了钱去喝酒抽烟什么的就违背了我们设立这个奖学金的目的。我说我对你们的目的不感兴趣，我只知道你们说了给奖金就不能在考完了之后改成优惠打折，至于这个钱我拿到了之后是抽烟喝酒还是大鱼大肉，都跟你们没关系。韩国校长把脸拉成长方形，然后说，年轻人，在我们韩国，你要是对长辈这样没有礼貌，早就挨打了。 </p>
<p>和我无能的前半生的大部分时候一样，我拿这些西装革履的流氓完全没有办法，我不能抑制地又说了脏话，“我操，你们他妈的怎么这么流氓？” </p>
<p>和那个时代所有受了刺激的“善良市民”一样，我想到了找报社，我怯生生地生平第一次走进报社，在门口登记的时候，我学着从电视里看到的，对门卫说，我是一个“市民”，我是来“反映情况”的。非常走运的是，接待我的报社记者竟然是我的初中同学，她仔细听完我“反映情况”，充满了想来是因对老同学热心而产生的愤怒；她对我说，我一定彻底揭发他们，下午我就去他们学校采访一下，核实完情况以后，争取几天之内就让它见报。 </p>
<p>出了报社的大门想了想，觉得我还可以再做点什么，干是又去了市教委“反映情况”。一个教委的中年马脸男斜叼着烟，皱着眉头，时不时喝口茶，听了半天后说，好，我们都知道了，你留个联系方式等我们通知你吧。 </p>
<p>就像我从他表情里预感到的那样，这个人始终没有跟我联系。而且后来我试图再去找他的时候，也被门卫挡在了外面。一周后的坏消息是，《Y市晚报》的同学告诉我说，这个“三育”学校是和市教委合作办学的一个机构，《Y市晚报》是市委办的报纸，因此她写的稿子被总编毙掉了。 </p>
<p>我下了很大的决心，才敢走迸Y市法院。在那之前的一个星期里，我每天都对着自己念叨：“傻逼，你总得有第一次吧。”1995年的中国，我不知道有多少人像我这样对于第一次尝试用法律保护自己的权益感到兴奋、紧张和好奇，但我想这些跃跃欲试的人里，很多都是受了《秋菊打官司》的影响(无论从哪个角度看，这部1993年红遍全国的电影都是一部了不起的作品。） </p>
<p>在法院的大厅前台，一个胖胖的中年接待男听完我来的目的之后，直接把我轰到了门外，“去去去!你这个小同志以为法院是啥地方？！这种鸡毛蒜皮的屁事儿也来捣乱！”我头脑一片空白，在法院门口愣了半天，然后发现法院对面全都是挂着简陋牌子的律师事务所。我犹豫了一下，还是硬着头皮敲开了其中一个门，很尴尬地对里面的人表示我没有钱付给他，但是很希望他能给我一些建议。一个笑眯眯的李姓律师给我耐心地讲解了半天，并且对我表示了鼓励和钦佩。在1995年的中国，在人口不到30万的小城Y市，一个决定用法律手段解决这类问题的小伙子在他看来，是一个“了不起的年轻人”，“观念很超前啊”，他这样说。当然我也由衷地表示，他肯这样花时间，热心无偿地帮助一个陌生人，“真是一位了不起的律师啊”。 </p>
<p>两个了不起的中国男人依依惜别后，年轻人重新杀进了法院。按照律师指点的那样，气势汹汹地要求中年接待男，“少废话，给我拿一份表格(我忘了是叫民事诉讼立案表还是什么)来！”接待男根据这个年轻人的狰狞嘴脸，看出他已经成为一个诉讼常识方面的暴发户，于是乖乖地摸出了一份表格。填完表格之后，在法院的二楼，一个非常客气但又明显冷漠的女法官接待了我，或者难确地说，是打发了我。她让我到河南(就是把Y市打劈成两半的那条河的对面)的民事立案庭(民事调解办公室？)去“试试”,我试图再多请救两句，“你上那边问吧，”她说，接着她又说了中国人都很熟悉的那句公务员用语，“这事儿不归我们管。” </p>
<p>跟膀大腰圆的市法院不一样，河南的那个民事诉讼立案庭在一栋灰头土脸的二层小楼里。我在一群神情愁苦的乡下群众后面排了将近三个多小时的队，听到前面人申述的都是真刀真枪的冤情，比如自己家的地被强占了，比如自己家的媳妇被强占了，比如自己家的地和媳妇一起被强占了……这使得我在排队过程中感到越来越没底气，除非我申述的时候他们能给我清场，不然我实在没勇气在这样一群不幸的人当中把我那点“鸡毛蒜皮的屁事儿”坦然地说出来。何况，每一个老乡说完之后，立案庭的中年妇女都会用让人彻底绝望的口气重复同一句话，“哎呀，同志，你这个事情很难办啊。”终干，到了还差两个人就轮到我的时候，我逃离了这个鬼地方。 </p>
<p>最后，我想到了上街去喊一喊。几乎可以肯定这个选择是受了一些文艺作品的影响，应该是掺杂了一个年轻人在生命某个阶段产生的自我戏剧化的需要(那时候我还没有接触过这类唬人的名词，我只是模糊地意识到了一些不纯粹的东西)。 </p>
<p>初步设想的方案大概是这样的：我穿着“反映情况”的详情的T恤衫，斜挎着大功率的收录机(口号提前录好），设法把两棍竹竿斜着捆在背上并在脑袋上方用它们撑起一个较大的口号条幅，比如“倒也谈不上天理难容”，胸前再挂一个仪仗队用的鼓，就可以上路了。我还可以发动我所有的狐朋狗友都去远远地围观，免得真的出现冷场(如果他们不敢的话)。事实上后来他们都兴奋地表示一定会去，至少会去围观。除了对我这个做法确实很支持之外，这种事情毕竟也是平淡生活里难得一见的调剂，这解释了他们为什么在电话里表示要去的时候，夹杂了大量兴奋的、音色失真的“我操”！ </p>
<p>计划中的路线是从市医院门口出发，放着录音口号，敲着鼓，经过市公安局、市委(在市委门口会多待一会儿，可能还应该呼唤马脸男出来对个话什么的，当然，这个比较没有创意)、州委、州政府，最后到达位于铁南(即铁路之南)的“三育“学校门口。这个倒霉学校刚好在一条大马路的边上，所以基本上，当造型醒目的我，我走到门口（这个时候录音机可以短暂地改放一会儿Roxette的Look Sharp），只要往那儿一杵，就会引起足够的围观了。我想如果我能坚持上一个星期，这个手巴掌大的城市里的所有市民就都该知道这件事了。 </p>
<p>我简单学习了一下相关法律条例，然后就写了一份书面申请去公安局。窗门的小同志显然没见过这种申请，甚至不知道该如何处理，埋头焦虑地不停拨打电话询问。我想了想，就给在市公安局工作的老同学李神探打了个电话，李神探神情凝重地出来把我拽到他的办公室，“我操，你不想活了？”一一和所有体制内谋生的人一样，他会把做这类事情直接看成是自寻短见。 </p>
<p>因为担心劝阻无效，李神探索性就把这件事告诉了我的父母，结果可想而知。我是说，我的父母和那个时代的绝大多数中国父母没有本质区别(其实我很能理解他们，年轻的时候就能，我只是不同意他们而已）。 </p>
<p>开春的时候，我和一些朋友包括我的表哥到一个郊区的网球场去打球。突然，我们看到那个韩国校长和几个人也走进了场地。大家亢奋起来，七嘴八舌地出主意，最后我们决定主动去招惹他，逼他先发作，然后大伙就围上去群殴。 </p>
<p>那时候我还很年轻，也很幼稚，没有意识到这种做法的软弱本质。我只是迟疑了一下，就兴冲冲地跟着大家在场地外边围成了半个圈子，然后大家一起恶狠狠地看着韩国校长。这小子明显慌了，假装不经意地在场内转来转去。最后，他终于发现，无论转到哪个方向，基本上都至少有一双兽兽的眼睛盯着他。 </p>
<p>大家渐渐按捺不住了，于是开始冲着他做侮辱性的手势，由于不确定一个韩国人是否能看懂，我们很体贴地做了两个非本地传统的手势，一个从美国电影里学的(当然就是竖中指了，那时候这在中国还不太流行），和一个最近刚从俄罗斯流传过来的。这时候韩国校长有些狼狈地朝场边的长椅处看了一眼，我顺着他的眼光瞄过去，看到一个神色慌张的韩国女人手里拉着两个孩子站了起来。小一点的孩子朝我们这个方向看了一会儿，然后抬头看妈妈，没有得到反应之后，他拉了一下妈蚂的袖子。 </p>
<p>即使是在我的道德感相对模糊的青年时代，我也能感觉到当着一个男人老婆孩子的面羞辱他，是一件令人非常不安的事情。于是我突然没了兴致，招呼大家走掉了。 </p>
<p>在回家的路土，在表哥的车里，在推推搡搡的打闹和七嘴八舌吹牛逼的声音中，我感到巨大的委屈像童年时常常感受到的那样，铺天盖地地压了下来。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化用例中如何获得testcase名称</title>
    <url>/2020/12/05/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%94%A8%E4%BE%8B%E4%B8%AD%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97testcase%E5%90%8D%E7%A7%B0/</url>
    <content><![CDATA[<h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Rule</span><br><span class="hljs-keyword">public</span> TestName testName = <span class="hljs-keyword">new</span> TestName();<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testcase_001</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(testName.getMethodName());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testcase_002</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(testName.getMethodName());<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">testcase_001<br>testcase_002<br></code></pre></td></tr></table></figure>



<h3 id="TestNG"><a href="#TestNG" class="headerlink" title="TestNG"></a>TestNG</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String testcaseName = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-meta">@BeforeMethod</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeMethod</span><span class="hljs-params">(Method method)</span> </span>&#123;<br>    testcaseName = method.getName();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testcase_001</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(testcaseName);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testcase_002</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(testcaseName);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行输出:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">testcase_001<br>testcase_002<br></code></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Automation</tag>
      </tags>
  </entry>
  <entry>
    <title>解决MacOS通过gem安装rails后无法使用</title>
    <url>/2023/12/09/%E8%A7%A3%E5%86%B3MacOS%E9%80%9A%E8%BF%87gem%E5%AE%89%E8%A3%85rails%E5%90%8E%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>升级ruby的版本后，当我尝试使用rails时，无法使用该命令。</p>
<p>当我们使用homebrew安装ruby后，使用sudo gem install rails进行安装，安装完成后，使用以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ rails --version <br></code></pre></td></tr></table></figure>

<p>会出现找不到该命令的问题，排除$PATH配置问题后，进行如下设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">gem update --system<br>gem install bundler<br>gem install rails<br></code></pre></td></tr></table></figure>

<p>其他常用的排查命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看 ruby 的安装目录</span><br><span class="hljs-built_in">which</span> -a ruby<br><span class="hljs-comment"># 使用如下命令列出 ruby 在 brew 当中的下载文件</span><br>brew list ruby<br><span class="hljs-comment"># 强制卸载 ruby </span><br>brew uninstall --force ruby<br><span class="hljs-comment"># 清除 ruby 依赖文件使用如下命令</span><br>brew autoremove<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
</search>
